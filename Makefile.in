##########################################################################
#
# This is the Makefile for the grsh shell -- if it has the name
# "Makefile.in", then it is a template for the real Makefile, so to
# generate the real Makefile, run the "configure" script.
#
# Copyright (c) 1998-2003 Rob Peters <rjpeters@klab.caltech.edu>
#
# $Id$
#
##########################################################################

default: all

MAKEFLAGS += --warn-undefined-variables

#-------------------------------------------------------------------------
#
# Import variables generated by the configure script
#
#-------------------------------------------------------------------------

PACKAGE_VERSION := @PACKAGE_VERSION@
prefix          := @prefix@
exec_prefix     := @exec_prefix@
matlab_lib      := @matlab_lib@
EXECUTABLE      := @EXECUTABLE@
CXX             := @CXX@
SHLIB_CMD       := @SHLIB_CMD@
STATLIB_CMD     := @STATLIB_CMD@
OBJEXT          := @OBJEXT@
LIB_SUFFIX      := @LIB_SUFFIX@
SHLIB_EXT       := @SHLIB_EXT@
STATLIB_EXT     := @STATLIB_EXT@
CPPFLAGS        := @CPPFLAGS@
CXXFLAGS        := @CXXFLAGS@
DEFS            := @DEFS@
LDFLAGS         := @LDFLAGS@
LIBS            := @LIBS@ @X_EXTRA_LIBS@

#-------------------------------------------------------------------------
#
# Rules to rebuild the Makefile from the configure script
#
#-------------------------------------------------------------------------

configure: configure.in
	autoconf

config.status: configure
	./config.status --recheck

Makefile: Makefile.in config.status
	./config.status --file=Makefile:Makefile.in

#-------------------------------------------------------------------------
#
# Directories for different file types
#
#-------------------------------------------------------------------------

BUILD := build
SRC := src
DEP := $(BUILD)/dep
OBJ := $(BUILD)/obj
LOGS := ./logs
DOC := ./doc
SCRIPTS := ./scripts
VISX_LIB_DIR := $(exec_prefix)/lib/visx

#-------------------------------------------------------------------------
#
# Build rules for object files
#
#-------------------------------------------------------------------------

# This build rule helps to create subdirectories that don't need to be part of
# the CVS repository, but do need to exist to hold generated files during the
# build process in sandboxes..
%.timestamp:
	@[ -d ${@D} ] || mkdir -p ${@D}
	@[ -f $@ ] || touch $@

CPPFLAGS += -I$(SRC)

ALL_CXXFLAGS := $(CXXFLAGS) $(CPPFLAGS) $(DEFS) \
	-DVISX_LIB_DIR=\"$(VISX_LIB_DIR)\"

$(OBJ)/%.$(OBJEXT) : $(SRC)/%.cc
	@[ -d ${@D} ] || mkdir -p ${@D}
	@echo $< >> $(LOGS)/CompileStats
	@echo ""
	time $(CXX) $(ALL_CXXFLAGS) \
		-c $< \
		-o $@

# to avoid deleting any intermediate targets
.SECONDARY:

$(SRC)/%.cc.E : $(SRC)/%.cc
	time $(CXX) -E $< $(ALL_CXXFLAGS) > $@

$(SRC)/%.cc.E : $(SRC)/%.h
	echo "#include \"$<\"" > temp.cc
	time $(CXX) -E temp.cc $(ALL_CXXFLAGS) > $@
	rm temp.cc

#-------------------------------------------------------------------------
#
# Build rules for static and dynamic libraries
#
#-------------------------------------------------------------------------

%.$(SHLIB_EXT):
	@[ -d ${@D} ] || mkdir -p ${@D}
	time $(SHLIB_CMD) $@ $(LDFLAGS) $^

%.$(STATLIB_EXT):
	@[ -d ${@D} ] || mkdir -p ${@D}
	time $(STATLIB_CMD) $@ $^

#-------------------------------------------------------------------------
#
# Dependencies 
#
#-------------------------------------------------------------------------

# This `find` command gets run just once, when the makefile is loaded.
ALL_SRCS := $(shell find $(SRC) -name \*.h -or -name \*.cc)

# dependencies of object files on source+header files

$(DEP)/cppdepends: $(DEP)/.timestamp $(ALL_SRCS)
	time $(SCRIPTS)/cppdeps.tcl --src $(SRC) --objdir $(OBJ)/ > $@

# dependencies of package shlib's on object files

$(DEP)/pkgdepends: $(DEP)/.timestamp $(VISX_LIB_DIR)/.timestamp \
		$(ALL_SRCS) src/pkgs/buildPkgDeps.tcl
	src/pkgs/buildPkgDeps.tcl \
		--depfile $@ \
		--objdir $(OBJ)/pkgs \
		--objext $(OBJEXT) \
		--pkgdir $(SRC)/pkgs \
		--libdir $(VISX_LIB_DIR)

ifneq ($(matlab_lib),)
$(VISX_LIB_DIR)/mtx.so: \
	$(matlab_lib)/libmx.so \
	$(matlab_lib)/libmatlb.so

$(VISX_LIB_DIR)/matlabengine.so: \
	$(matlab_lib)/libeng.so \
	$(matlab_lib)/libmx.so \
	$(matlab_lib)/libut.so \
	$(matlab_lib)/libmat.so \
	$(matlab_lib)/libmi.so \
	$(matlab_lib)/libmatlb.so
endif

# dependencies of main project shlib's on object files

LIB_DEP_CMD := 	$(SCRIPTS)/build_lib_rules.tcl \
		--libdir $(exec_prefix)/lib \
		--libprefix libDeep \
		--libext $(LIB_SUFFIX).$(SHLIB_EXT) \
		--srcroot $(SRC) \
		--objroot $(OBJ) \
		--objext .$(OBJEXT) \
		--module Visx \
		--module Gfx \
		--module GWT \
		--module Tcl \
		--module IO \
		--module Gx \
		--module System \
		--module Util \
		>

$(DEP)/libdepends: $(DEP)/.timestamp $(ALL_SRCS) \
		$(SCRIPTS)/build_lib_rules.tcl
	$(LIB_DEP_CMD) $@

include $(DEP)/cppdepends $(DEP)/pkgdepends $(DEP)/libdepends

#-------------------------------------------------------------------------
#
# Build rules for production and debug executables
#
#-------------------------------------------------------------------------

ALL_STATLIBS := $(filter %.$(STATLIB_EXT),$(PROJECT_LIBS))
ALL_SHLIBS   := $(filter %.$(SHLIB_EXT),$(PROJECT_LIBS))

all: TAGS install_scripts $(ALL_SHLIBS) $(PKG_LIBS) $(EXECUTABLE) check

GRSH_STATIC_OBJS := $(subst .cc,.$(OBJEXT),\
	$(subst $(SRC),$(OBJ), $(wildcard $(SRC)/grsh/*.cc)))

$(EXECUTABLE): $(exec_prefix)/bin/.timestamp $(GRSH_STATIC_OBJS) $(ALL_STATLIBS)
	time $(CXX) -o $@ $(GRSH_STATIC_OBJS) $(LDFLAGS) $(PROJECT_LIBS) $(LIBS)

install_scripts: $(exec_prefix)/bin/.timestamp
	cp share/scripts/*.tcl $(exec_prefix)/bin

check:
	$(EXECUTABLE) ./testing/grshtest.tcl

#-------------------------------------------------------------------------
#
# Miscellaneous targets
#
#-------------------------------------------------------------------------

backup:
	tclsh $(SCRIPTS)/Backup.tcl

benchmarks: $(EXECUTABLE)
	$(EXECUTABLE) $(SCRIPTS)/benchmarks.tcl -output $(LOGS)/benchmarks.txt

# Remove all backups, temporaries, and coredumps
neat:
	find . -name \*~ -exec ls -l {} \;
	find . -name \#~ -exec ls -l {} \;
	find . -name .\#\* -exec ls -l {} \;
	rm -f ./expt*2003.asw ./resp*2003 ./core*

# Make neat, and also remove all intermediate build files
cleaner: neat
	find $(BUILD) -follow -type f -exec rm -f {} \;

# Count the lines in all source files
count:
	@wc $(ALL_SRCS) | sort -n | tee $(LOGS)/count

count_sort: $(ALL_SRCS)
	@wc $(ALL_SRCS) | sort -n | tee $(LOGS)/count_sort

docs: $(DOC)/DoxygenConfig $(DOC)/*.doc $(ALL_SRCS)
	(doxygen $(DOC)/DoxygenConfig > $(DOC)/DocLog) >& $(DOC)/DocErrors
	cd ~/www/grsh; chmod -R og+r *

# Generate tags file based only on header files
H_TAGS: $(ALL_SRCS)
	find $(SRC) -name \*.h | etags - -o $@

# Count the number of non-commented source lines
ncsl:
	@NCSL $(ALL_SRCS) | tee $(LOGS)/ncsl

# Count the number of non-commented source lines and sort
ncsl_sort:
	@NCSL $(ALL_SRCS) | sort -n | tee $(LOGS)/ncsl_sort

obj_sizes:
	ls -lLR $(OBJ) | grep "\.$(OBJEXT)" | sort -n +4 > obj_sizes

.PHONY: showpid
showpid:
	ps -ef | grep make

# Generate TAGS file based on all source files
TAGS: $(ALL_SRCS)
	find $(SRC) -name \*.h -or -name \*.cc | etags - -o $@

SNAPSHOT := grsh-`date +%Y_%m_%d`

export: snapshots/.timestamp
	cvs -d `cat ./CVS/Root` export -r HEAD -d snapshots/$(SNAPSHOT) grsh
	rm -r snapshots/$(SNAPSHOT)/logs
	rm -r snapshots/$(SNAPSHOT)/old_src
	rm -r snapshots/$(SNAPSHOT)/future_src
	cd snapshots/$(SNAPSHOT); autoconf
	cd snapshots; tar cfz $(SNAPSHOT).tar.gz $(SNAPSHOT)
