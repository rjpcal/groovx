##########################################################################
#
# @configure_input@
#
# This is the Makefile for the GroovX project -- if this file has the name
# "Makefile.in", then it is a template for the real Makefile, so to
# generate the real Makefile, run the "configure" script.
#
# Copyright (c) 1998-2005 Rob Peters <rjpeters at klab dot caltech dot edu>
#
# $Id$
#
# --------------------------------------------------------------------
#
# This file is part of GroovX.
#
# GroovX is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# GroovX is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with GroovX; if not, write to the Free Software Foundation, Inc., 59
# Temple Place, Suite 330, Boston, MA 02111-1307 USA.
#
##########################################################################

default: install

MAKEFLAGS += --warn-undefined-variables

#-------------------------------------------------------------------------
#
# Import variables generated by the configure script
#
#-------------------------------------------------------------------------

PACKAGE_NAME    := @PACKAGE_NAME@
PACKAGE_TARNAME := @PACKAGE_TARNAME@
PACKAGE_VERSION := @PACKAGE_VERSION@
prefix          := @prefix@
exec_prefix     := @exec_prefix@
matlab_lib      := @matlab_lib@
CXX             := @CXX@
SHLIB_CMD       := @SHLIB_CMD@
STATLIB_CMD     := @STATLIB_CMD@
OBJEXT          := @OBJEXT@
LIB_SUFFIX      := @LIB_SUFFIX@
SHLIB_EXT       := @SHLIB_EXT@
STATLIB_EXT     := @STATLIB_EXT@
CPPFLAGS        := @CPPFLAGS@ -include config.h
CXXFLAGS        := @CXXFLAGS@
DEFS            := @DEFS@
LDFLAGS         := @LDFLAGS@
LIBS            := @LIBS@ @X_EXTRA_LIBS@
with_htmldoc    := @with_htmldoc@
DOXYGEN_PROG    := @DOXYGEN_PROG@
BUILD           := @BUILD@
windowsystem    := @windowsystem@

LIB_EXT         := $(LIB_SUFFIX).$(SHLIB_EXT)


#-------------------------------------------------------------------------
#
# Directories for different file types
#
#-------------------------------------------------------------------------

SRC := src
DEP := $(BUILD)/dep
OBJ := $(BUILD)/obj
LOGS := ./logs
DOC := ./doc
SCRIPTS := ./scripts
DEVSCRIPTS := ./devscripts
VISX_LIB_DIR := $(exec_prefix)/lib/visx

DEFS += -DGROOVX_AUDIO_DIR=\"$(prefix)/share/audio\"
DEFS += -DVISX_LIB_DIR=\"$(VISX_LIB_DIR)\"

#-------------------------------------------------------------------------
#
# Rules to rebuild files from the configure script
#
#-------------------------------------------------------------------------

configure: configure.in
	autoconf

config.status: configure
	./config.status --recheck

.config-h-in.stamp: configure.in
	autoheader configure.in
	touch $@

config.h.in: .config-h-in.stamp

.config-h.stamp: config.h.in config.status
	./config.status --header=config.h:config.h.in
	touch $@

config.h: .config-h.stamp

Makefile: Makefile.in config.status
	./config.status --file=Makefile:Makefile.in

$(DOC)/DoxyConfig: $(DOC)/DoxyConfig.in config.status
	./config.status --file=$(DOC)/DoxyConfig:$(DOC)/DoxyConfig.in

#-------------------------------------------------------------------------
#
# Build rules for object files
#
#-------------------------------------------------------------------------

# This build rule helps to create subdirectories that don't need to be part of
# the CVS repository, but do need to exist to hold generated files during the
# build process in sandboxes..
%.timestamp:
	@[ -d ${@D} ] || mkdir -p ${@D}
	@[ -f $@ ] || touch $@

CPPFLAGS += -I$(SRC) -I$(SRC)/pkgs

ALL_CXXFLAGS := $(CXXFLAGS) $(CPPFLAGS) $(DEFS)

$(OBJ)/%.$(OBJEXT) : $(SRC)/%.cc config.h
	@[ -d ${@D} ] || mkdir -p ${@D}
	@echo $< >> $(LOGS)/CompileStats
	@echo ""
	time $(CXX) $(ALL_CXXFLAGS) \
		-c $< \
		-o $@

$(OBJ)/%.$(OBJEXT) : $(SRC)/%.C config.h
	@[ -d ${@D} ] || mkdir -p ${@D}
	@echo $< >> $(LOGS)/CompileStats
	@echo ""
	time $(CXX) $(ALL_CXXFLAGS) -DINST_BYTE -DINST_FLOAT \
		-c $< \
		-o $@

# to avoid deleting any intermediate targets
.SECONDARY:

$(SRC)/%.cc.E : $(SRC)/%.cc
	time $(CXX) -E $< $(ALL_CXXFLAGS) > $@

$(SRC)/%.cc.E : $(SRC)/%.h
	echo "#include \"$<\"" > temp.cc
	time $(CXX) -E temp.cc $(ALL_CXXFLAGS) > $@
	rm temp.cc

#-------------------------------------------------------------------------
#
# Build rules for static and dynamic libraries
#
#-------------------------------------------------------------------------

%.$(SHLIB_EXT):
	@[ -d ${@D} ] || mkdir -p ${@D}
	time $(SHLIB_CMD) $@ $(LDFLAGS) $^ $(LIBS)

%.$(STATLIB_EXT):
	@[ -d ${@D} ] || mkdir -p ${@D}
	time $(STATLIB_CMD) $@ $^

#-------------------------------------------------------------------------
#
# Dependencies
#
#-------------------------------------------------------------------------

# This `find` command gets run just once, when the makefile is loaded.
ALL_SRCS := $(shell find $(SRC) -follow -name \*.h -or -name \*.cc -or -name \*.C)
LOCAL_SRCS := $(shell find $(SRC) -name \*.h -or -name \*.cc -or -name \*.C)

# dependencies of object files on source+header files

$(DEVSCRIPTS)/cppdeps: $(DEVSCRIPTS)/cppdeps.cc
	$(CXX) -O2 -Wall $(LDFLAGS) $^ -o $@

$(DEP)/cppdepends: $(DEVSCRIPTS)/cppdeps $(DEP)/.timestamp $(ALL_SRCS)
	time $(DEVSCRIPTS)/cppdeps --includedir $(SRC)/pkgs --objdir $(OBJ)/ --srcdir $(SRC) |sort> $@

$(DEP)/ldepgroups: $(DEVSCRIPTS)/cppdeps $(DEP)/.timestamp $(ALL_SRCS)
	time $(DEVSCRIPTS)/cppdeps --includedir $(SRC)/pkgs \
	  --objdir $(OBJ)/ \
	  --srcdir $(SRC) \
	  --output-ldep-groups \
	  |sort -n> $@

$(DEP)/ldeplevels: $(DEVSCRIPTS)/cppdeps $(DEP)/.timestamp $(ALL_SRCS)
	time $(DEVSCRIPTS)/cppdeps --includedir $(SRC)/pkgs \
	  --objdir $(OBJ)/ \
	  --srcdir $(SRC) \
	  --output-ldep-levels \
	  |sort -n> $@

$(DEP)/ldeplevelsv: $(DEVSCRIPTS)/cppdeps $(DEP)/.timestamp $(ALL_SRCS)
	time $(DEVSCRIPTS)/cppdeps --includedir $(SRC)/pkgs \
	  --objdir $(OBJ)/ \
	  --srcdir $(SRC) \
	  --output-ldep-levelsv \
	  |sort -n> $@

$(DEP)/altdeps: $(DEVSCRIPTS)/cppdeps.tcl $(DEVSCRIPTS)/deps.tcl $(DEP)/.timestamp $(ALL_SRCS)
	time $(DEVSCRIPTS)/cppdeps.tcl --include $(SRC)/pkgs --src $(SRC) --objdir $(OBJ)/ > $@


sysdepends: $(DEVSCRIPTS)/cppdeps $(DEP)/.timestamp $(ALL_SRCS)
	time $(DEVSCRIPTS)/cppdeps --includedir $(SRC)/pkgs \
		--objdir $(OBJ)/ --srcdir $(SRC) \
		--checksys \
		--sysincludedir /usr/lib/gcc/i386-redhat-linux/3.4.2/include \
		--sysincludedir /usr/include/c++/3.4.2 \
		--sysincludedir /usr/include/c++/3.4.2/backward \
		--sysincludedir /usr/include/c++/3.4.2/i386-redhat-linux \
		|sort> $@

direct_cdeps: $(DEVSCRIPTS)/cppdeps $(DEP)/.timestamp $(ALL_SRCS)
	time $(DEVSCRIPTS)/cppdeps --includedir $(SRC)/pkgs \
		--objdir $(OBJ)/ --srcdir $(SRC) \
		--checksys \
		--sysincludedir /usr/lib/gcc/i386-redhat-linux/3.4.2/include \
		--sysincludedir /usr/include/c++/3.4.2 \
		--sysincludedir /usr/include/c++/3.4.2/backward \
		--sysincludedir /usr/include/c++/3.4.2/i386-redhat-linux \
		--output-direct-cdeps \
		|sort> $@

# Run the old Tcl script and compare its output against the new C++
# dependency-computation script
depcheck: $(DEP)/cppdepends $(DEP)/altdeps
	diff $(DEP)/cppdepends $(DEP)/altdeps

.PHONY: deptime
deptime: $(DEVSCRIPTS)/cppdeps $(DEP)/altdeps
	/usr/bin/time -f "%e %U %S" -o deptime -a \
	 $(DEVSCRIPTS)/cppdeps --objdir $(OBJ)/ $(SRC) |sort> $(DEP)/cppdepends
	cat deptime
	diff $(DEP)/cppdepends $(DEP)/altdeps

# dependencies of package shlib's on object files

$(DEP)/pkgdepends $(VISX_LIB_DIR)/pkgIndex.tcl: \
		$(DEP)/.timestamp $(VISX_LIB_DIR)/.timestamp \
		$(ALL_SRCS) $(SCRIPTS)/buildPkgDeps.tcl
	$(SCRIPTS)/buildPkgDeps.tcl \
		--depfile $(DEP)/pkgdepends \
		--objdir $(OBJ)/pkgs \
		--objext $(OBJEXT) \
		--pkgsrc $(SRC)/pkgs \
		--libdir $(VISX_LIB_DIR) \
		--pkgdirs matlabengine,mtx,whitebox

PKG_LIB_DEPS :=					\
$(exec_prefix)/lib/libDeepTcl$(LIB_EXT)		\
$(exec_prefix)/lib/libDeepNub$(LIB_EXT)		\
$(exec_prefix)/lib/libDeepUtil$(LIB_EXT)

# Common dependencies for all package libraries:
$(VISX_LIB_DIR)/algotest.$(SHLIB_EXT):        $(PKG_LIB_DEPS)
$(VISX_LIB_DIR)/basesixfourtest.$(SHLIB_EXT): $(PKG_LIB_DEPS)
$(VISX_LIB_DIR)/fstringtest.$(SHLIB_EXT):     $(PKG_LIB_DEPS)
$(VISX_LIB_DIR)/geomtest.$(SHLIB_EXT):        $(PKG_LIB_DEPS) $(exec_prefix)/lib/libDeepGeom$(LIB_EXT)
$(VISX_LIB_DIR)/matlabengine.$(SHLIB_EXT):    $(PKG_LIB_DEPS)
$(VISX_LIB_DIR)/mtx.$(SHLIB_EXT):             $(PKG_LIB_DEPS)
$(VISX_LIB_DIR)/mtxtest.$(SHLIB_EXT):         $(PKG_LIB_DEPS)
$(VISX_LIB_DIR)/numtest.$(SHLIB_EXT):         $(PKG_LIB_DEPS)
$(VISX_LIB_DIR)/signaltest.$(SHLIB_EXT):      $(PKG_LIB_DEPS)
$(VISX_LIB_DIR)/tcltimertest.$(SHLIB_EXT):    $(PKG_LIB_DEPS)
$(VISX_LIB_DIR)/vectwotest.$(SHLIB_EXT):      $(PKG_LIB_DEPS)

# Specialized dependencies for certain package libraries:
$(VISX_LIB_DIR)/matlabengine.$(SHLIB_EXT): \
	$(VISX_LIB_DIR)/mtx.$(SHLIB_EXT)

$(VISX_LIB_DIR)/mtxtest.$(SHLIB_EXT): \
	$(VISX_LIB_DIR)/mtx.$(SHLIB_EXT)

$(VISX_LIB_DIR)/numtest.$(SHLIB_EXT): \
	$(VISX_LIB_DIR)/mtx.$(SHLIB_EXT)

ifneq ($(matlab_lib),)
$(VISX_LIB_DIR)/mtx.so: \
	$(matlab_lib)/libmx.so \

$(VISX_LIB_DIR)/matlabengine.so: \
	$(matlab_lib)/libeng.so \
	$(matlab_lib)/libmx.so \
	$(matlab_lib)/libut.so \
	$(matlab_lib)/libmat.so \

endif

# dependencies of main project shlib's on object files

LIB_DEP_CMD := 	$(SCRIPTS)/build_lib_rules.tcl \
		--libdir $(exec_prefix)/lib \
		--libprefix libDeep \
		--libext $(LIB_EXT) \
		--srcroot $(SRC) \
		--objroot $(OBJ) \
		--objext .$(OBJEXT) \
		--modules "Visx,Gfx,Tcl,IO,Media,Geom,Util,Nub"

$(DEP)/libdepends: $(DEP)/.timestamp $(ALL_SRCS) \
		$(SCRIPTS)/build_lib_rules.tcl
	$(LIB_DEP_CMD) > $@

include $(DEP)/cppdepends $(DEP)/pkgdepends $(DEP)/libdepends

# Need to set up the .LIBPATTERNS variable so that we get the right
# behavior when we specify something like "-lfoo" as a prerequisite.
.LIBPATTERNS = lib%.dylib lib%.so lib%.a

# Here we have all of the inter-library dependencies. These are needed,
# e.g., for Mac OS X to be able to do two-level namespace linking. That
# requires that there be no undefined symbols when creating a shared
# library, and that in turn requires that each shared library be linked
# against all its prerequisites.

$(exec_prefix)/lib/libDeepNub$(LIB_EXT): \
	$(exec_prefix)/lib/libDeepUtil$(LIB_EXT) \

$(exec_prefix)/lib/libDeepTcl$(LIB_EXT): \
	$(exec_prefix)/lib/libDeepNub$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepUtil$(LIB_EXT) \

$(exec_prefix)/lib/libDeepIO$(LIB_EXT): \
	$(exec_prefix)/lib/libDeepTcl$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepNub$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepUtil$(LIB_EXT)

$(exec_prefix)/lib/libDeepGeom$(LIB_EXT): \
	$(exec_prefix)/lib/libDeepUtil$(LIB_EXT) \

$(exec_prefix)/lib/libDeepMedia$(LIB_EXT): \
	$(exec_prefix)/lib/libDeepGeom$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepNub$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepUtil$(LIB_EXT) \

$(exec_prefix)/lib/libDeepGfx$(LIB_EXT): \
	$(exec_prefix)/lib/libDeepMedia$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepGeom$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepIO$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepTcl$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepNub$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepUtil$(LIB_EXT) \

$(exec_prefix)/lib/libDeepVisx$(LIB_EXT): \
	$(exec_prefix)/lib/libDeepMedia$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepGeom$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepIO$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepGfx$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepNub$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepUtil$(LIB_EXT) \
	$(exec_prefix)/lib/libDeepTcl$(LIB_EXT) \

#-------------------------------------------------------------------------
#
# Build rules for production and debug executables
#
#-------------------------------------------------------------------------

ALL_STATLIBS := $(filter %.$(STATLIB_EXT),$(PROJECT_LIBS))
ALL_SHLIBS   := $(filter %.$(SHLIB_EXT),$(PROJECT_LIBS))

STATIC_OBJS := $(subst .cc,.$(OBJEXT),\
	$(subst $(SRC),$(OBJ), $(wildcard $(SRC)/groovx/*.cc)))

EXECUTABLE := $(exec_prefix)/bin/groovx$(PACKAGE_VERSION)

ifneq ($(windowsystem),aqua)
$(EXECUTABLE): $(exec_prefix)/bin/.timestamp $(STATIC_OBJS) $(ALL_STATLIBS)
	time $(CXX) -o $@ $(STATIC_OBJS) $(LDFLAGS) $(PROJECT_LIBS) $(LIBS)
else
OSXAPP := $(exec_prefix)/Groovx.app/Contents/MacOS/Groovx
$(OSXAPP): $(STATIC_OBJS) $(ALL_STATLIBS)
	mkdir -p $(exec_prefix)/Groovx.app/Contents/MacOS
	time $(CXX) -o $(exec_prefix)/Groovx.app/Contents/MacOS/Groovx $(STATIC_OBJS) $(LDFLAGS) $(PROJECT_LIBS) $(LIBS)

$(EXECUTABLE): $(exec_prefix)/bin/.timestamp $(OSXAPP)
	rm -f $@
	echo "#!/bin/sh" >> $@
	echo "\"$(exec_prefix)/Groovx.app/Contents/MacOS/Groovx\" \"\$$@\"" >> $@
	/bin/chmod +x $@
endif

$(exec_prefix)/bin/groovx: $(EXECUTABLE)
	ln -s -f $(^F) $@

.PHONY: build install_scripts install check all

# Have to put these components in a strict dependence hierarchy, since some
# versions of make (e.g. under Darwin) don't reliably run targets in their
# order in the dependency list. Thus any specific ordering requirements
# must be reflected explicitly in target-dependency relationships.

build:						\
TAGS						\
$(ALL_SHLIBS)					\
$(PKG_LIBS)					\
$(EXECUTABLE)

install:					\
install-scripts					\
install-audio					\
install-images					\
build						\
$(VISX_LIB_DIR)/pkgIndex.tcl			\
$(exec_prefix)/bin/groovx

check: install
	export __GL_SYNC_TO_VBLANK=0; $(EXECUTABLE) ./testing/grshtest.tcl

all: check

#-------------------------------------------------------------------------
#
# Miscellaneous targets
#
#-------------------------------------------------------------------------

backup:
	tclsh $(SCRIPTS)/Backup.tcl

benchmarks: $(EXECUTABLE)
	$(EXECUTABLE) $(SCRIPTS)/benchmarks.tcl -output $(LOGS)/benchmarks.txt

# Remove all backups, temporaries, and coredumps
neat:
	@find . -name \*~ -exec rm -fv {} \;
	@find . -name \#~ -exec rm -fv {} \;
	@find . -name .\#\* -exec rm -fv {} \;
	@rm -fv ./expt_2005*.{gvx,resp,log} \
		prof.out \
		tclprof.out \
		./core*

# Make neat, and also remove all intermediate build files
cleaner: neat
	find $(BUILD) -follow -type f -exec rm -f {} \;

# Count the lines in all source files
count:
	@wc $(LOCAL_SRCS) | sort -n | tee $(LOGS)/count

# Count the number of non-commented source lines
ncsl:
	@NCSL --mapped $(LOCAL_SRCS) | sort -n | tee $(LOGS)/ncsl

docs: $(DOC)/DoxyConfig
	mkdir -p $(BUILD)/html
	(time $(DOXYGEN_PROG) $(DOC)/DoxyConfig > $(DOC)/DocLog) >& $(DOC)/DocErrors
	time chmod -R og=u-w $(BUILD)/html
	mkdir -p $(with_htmldoc)
	time cp -r --preserve=mode $(BUILD)/html/* $(with_htmldoc)

# Generate tags file based only on header files
H_TAGS: $(ALL_SRCS)
	find $(SRC) -name \*.h | etags - -o $@

# Generate tags file based only on implementation files
CC_TAGS: $(ALL_SRCS)
	find $(SRC) -name \*.cc | etags - -o $@

# Show how many translation units (i.e., *.cc files) depend on each header file
headerdeps: $(DEP)/cppdepends
	rm -f .headerdeps.temp
	for f in `find $(SRC) -name \*.h`; do \
		n=`fgrep $$f $(DEP)/cppdepends|wc -l`; \
		echo "$$n $$f" >> .headerdeps.temp; \
	done
	sort -n .headerdeps.temp | tee $(LOGS)/headerdeps

obj_sizes:
	ls -lLR $(OBJ) | grep "\.$(OBJEXT)" | sort -n +4 | tee $(LOGS)/obj_sizes

.PHONY: showpid
showpid:
	ps -ef | grep make

# Generate TAGS file based on all source files
TAGS: $(ALL_SRCS)
	find $(SRC) -name \*.h -or -name \*.cc | etags - -o $@

svn_keywords:
	@for f in $(ALL_SRCS); do \
	  if test "`svn propget svn:keywords $$f`" != \
	          "Author Date Id Revision HeadURL"; then \
	    svn propset svn:keywords \
	                "Author Date Id Revision HeadURL" $$f; \
	  fi; \
	done

DISTNAME := $(PACKAGE_TARNAME)_$(shell date +%Y%m%d)
CVS_ROOT := $(shell test -e ./CVS/Root && cat ./CVS/Root)
CVS_REPO := $(shell test -e ./CVS/Root && cat ./CVS/Repository)
SVN_REV  := $(shell svnversion .)

cvs_export:
	echo $(DISTNAME)
	mkdir -p snapshots
	cd snapshots && \
	  cvs -z3 -d $(CVS_ROOT) export -r HEAD -d $(DISTNAME) $(CVS_REPO) \
	  && rm -r $(DISTNAME)/logs/* \
	  && (cd $(DISTNAME) && autoconf) \
	  && (cd $(DISTNAME) && echo $(DISTNAME) > SNAPSHOT) \
	  && (cd $(DISTNAME) && rm -r autom4te.cache) \
	  && tar cvfz $(DISTNAME).tar.gz $(DISTNAME)

svn_export:
	echo $(DISTNAME)
	mkdir -p snapshots
	cd snapshots && \
	  svn export file:///home/rjpeters/svnrepo/code/trunk/groovx $(DISTNAME) \
	  && rm -r $(DISTNAME)/logs/* \
	  && (cd $(DISTNAME) && autoconf) \
	  && (echo "date is $(DISTNAME)" > $(DISTNAME)/SNAPSHOT) \
	  && (echo "svn revision is $(SVN_REV)" >> $(DISTNAME)/SNAPSHOT) \
	  && (rm -r $(DISTNAME)/autom4te.cache) \
	  && tar cvfz $(DISTNAME).tar.gz $(DISTNAME)

www_export: svn_export
	/bin/cp snapshots/$(DISTNAME).tar.gz $(HOME)/www/code/
	/bin/chmod 444 $(HOME)/www/code/$(DISTNAME).tar.gz
	/bin/rm -f $(HOME)/www/code/$(PACKAGE_TARNAME)_current.tar.gz
	cd $(HOME)/www/code && /bin/ln -s \
		$(DISTNAME).tar.gz \
		$(PACKAGE_TARNAME)_current.tar.gz

#-------------------------------------------------------------------------
#
# Installation targets
#
#-------------------------------------------------------------------------


$(exec_prefix)/bin/%.tcl: ./share/scripts/%.tcl
	rm -f $@
	cp ./share/scripts/$(@F) $@
	chmod 555 $@

install-scripts: $(exec_prefix)/bin/.timestamp	\
$(exec_prefix)/bin/editor.tcl			\
$(exec_prefix)/bin/make_faces.tcl		\
$(exec_prefix)/bin/play_img_seq.tcl		\
$(exec_prefix)/bin/sample_expt.tcl		\
$(exec_prefix)/bin/slideshow.tcl		\
$(exec_prefix)/bin/visedit.tcl			\


$(prefix)/share/audio/%.au: ./share/audio/%.au
	rm -f $@
	cp $^ $@
	chmod 444 $@

install-audio: $(prefix)/share/audio/.timestamp	\
$(prefix)/share/audio/saw100_200Hz_2x120ms.au	\
$(prefix)/share/audio/saw100_200Hz_300ms.au	\
$(prefix)/share/audio/saw100_350Hz_2x120ms.au	\
$(prefix)/share/audio/saw100_350Hz_300ms.au	\
$(prefix)/share/audio/saw100_500Hz_2x120ms.au	\
$(prefix)/share/audio/saw100_500Hz_300ms.au	\
$(prefix)/share/audio/saw25_200Hz_2x120ms.au	\
$(prefix)/share/audio/saw25_200Hz_300ms.au	\
$(prefix)/share/audio/saw25_350Hz_2x120ms.au	\
$(prefix)/share/audio/saw25_350Hz_300ms.au	\
$(prefix)/share/audio/saw25_500Hz_2x120ms.au	\
$(prefix)/share/audio/saw25_500Hz_300ms.au	\
$(prefix)/share/audio/saw50_200Hz_2x120ms.au	\
$(prefix)/share/audio/saw50_200Hz_300ms.au	\
$(prefix)/share/audio/saw50_350Hz_2x120ms.au	\
$(prefix)/share/audio/saw50_350Hz_300ms.au	\
$(prefix)/share/audio/saw50_500Hz_2x120ms.au	\
$(prefix)/share/audio/saw50_500Hz_300ms.au	\
$(prefix)/share/audio/saw50_A\#_466Hz_300ms.au	\
$(prefix)/share/audio/saw50_A_440Hz_300ms.au	\
$(prefix)/share/audio/saw50_B_493Hz_300ms.au	\
$(prefix)/share/audio/saw50_C\#_554Hz_300ms.au	\
$(prefix)/share/audio/saw50_C_523Hz_300ms.au	\
$(prefix)/share/audio/saw50_D\#_622Hz_300ms.au	\
$(prefix)/share/audio/saw50_D_587Hz_300ms.au	\
$(prefix)/share/audio/saw50_E_329Hz_300ms.au	\
$(prefix)/share/audio/saw50_E_659Hz_300ms.au	\
$(prefix)/share/audio/saw50_F\#_370Hz_300ms.au	\
$(prefix)/share/audio/saw50_F_349Hz_300ms.au	\
$(prefix)/share/audio/saw50_G\#_415Hz_300ms.au	\
$(prefix)/share/audio/saw50_G_392Hz_300ms.au	\
$(prefix)/share/audio/saw75_200Hz_2x120ms.au	\
$(prefix)/share/audio/saw75_200Hz_300ms.au	\
$(prefix)/share/audio/saw75_350Hz_2x120ms.au	\
$(prefix)/share/audio/saw75_350Hz_300ms.au	\
$(prefix)/share/audio/saw75_500Hz_2x120ms.au	\
$(prefix)/share/audio/saw75_500Hz_300ms.au	\
$(prefix)/share/audio/sin_200Hz_2x120ms.au	\
$(prefix)/share/audio/sin_200Hz_300ms.au	\
$(prefix)/share/audio/sin_350Hz_2x120ms.au	\
$(prefix)/share/audio/sin_350Hz_300ms.au	\
$(prefix)/share/audio/sin_500Hz_2x120ms.au	\
$(prefix)/share/audio/sin_500Hz_300ms.au	\
$(prefix)/share/audio/sin_A\#_466Hz_300ms.au	\
$(prefix)/share/audio/sin_A_440Hz_300ms.au	\
$(prefix)/share/audio/sin_B_493Hz_300ms.au	\
$(prefix)/share/audio/sin_C\#_554Hz_300ms.au	\
$(prefix)/share/audio/sin_C_523Hz_300ms.au	\
$(prefix)/share/audio/sin_D\#_622Hz_300ms.au	\
$(prefix)/share/audio/sin_D_587Hz_300ms.au	\
$(prefix)/share/audio/sin_E_329Hz_300ms.au	\
$(prefix)/share/audio/sin_E_659Hz_300ms.au	\
$(prefix)/share/audio/sin_F\#_370Hz_300ms.au	\
$(prefix)/share/audio/sin_F_349Hz_300ms.au	\
$(prefix)/share/audio/sin_G\#_415Hz_300ms.au	\
$(prefix)/share/audio/sin_G_392Hz_300ms.au

$(prefix)/share/images/%.jpg: ./share/images/%.jpg
	rm -f $@
	cp $^ $@
	chmod 444 $@

install-images: $(prefix)/share/images/.timestamp \
$(prefix)/share/images/nga01.jpg		\
$(prefix)/share/images/nga02.jpg		\
$(prefix)/share/images/nga03.jpg		\
$(prefix)/share/images/nga04.jpg		\
$(prefix)/share/images/nga05.jpg		\
$(prefix)/share/images/nga06.jpg		\
$(prefix)/share/images/nga07.jpg		\
$(prefix)/share/images/nga08.jpg		\
$(prefix)/share/images/nga09.jpg		\
$(prefix)/share/images/nga10.jpg		\
