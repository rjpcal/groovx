///////////////////////////////////////////////////////////////////////
//
// asciistreamreader.h
// Rob Peters rjpeters@klab.caltech.edu
// created: Mon Jun  7 12:54:54 1999
// written: Wed Sep 27 14:42:45 2000
// $Id$
//
///////////////////////////////////////////////////////////////////////

#ifndef ASCIISTREAMREADER_H_DEFINED
#define ASCIISTREAMREADER_H_DEFINED

#if defined(NO_EXTERNAL_INCLUDE_GUARDS) || !defined(READER_H_DEFINED)
#include "io/reader.h"
#endif

#ifdef PRESTANDARD_IOSTREAMS
class istream;
class ostream;
#else
#  if defined(NO_EXTERNAL_INCLUDE_GUARDS) || !defined(IOSFWD_DEFINED)
#    include <iosfwd>
#    define IOSFWD_DEFINED
#  endif
#endif

// This is a hack to help shorten up names for assemblers on systems
// that need short identifier names. A typedef at the end of this file
// re-introduces AsciiStreamReader as a typedef for ASR, so that
// client code should be able to use the typename AsciiStreamReader in
// all cases.
#if defined(IRIX6) || defined(HP9000S700)
#define AsciiStreamReader ASR
#endif

///////////////////////////////////////////////////////////////////////
/**
 *
 * \c AsciiStreamReader implements the \c IO::Reader interface, using nice
 * human-readable ascii formatting. \c AsciiStreamReader restores
 * objects from an input stream containing ascii data that has been
 * generated by AsciiStreamWriter. With this data format, objects may
 * read and write their attributes in any order.
 *
 **/
///////////////////////////////////////////////////////////////////////

class AsciiStreamReader : public IO::Reader {
public:
  /// Construct with a connection to an open \c STD_IO::istream.
  AsciiStreamReader(STD_IO::istream& is);

  /// Virtual destructor.
  virtual ~AsciiStreamReader();

  virtual IO::VersionId readSerialVersionId();

  virtual char readChar(const char* name);
  virtual int readInt(const char* name);
  virtual bool readBool(const char* name);
  virtual double readDouble(const char* name);
  virtual char* readCstring(const char* name);
  virtual void readValueObj(const char* name, Value& value);

  virtual IO::IoObject* readObject(const char* name);
  virtual void readOwnedObject(const char* name, IO::IoObject* obj);
  virtual void readBaseClass(const char* baseClassName, IO::IoObject* basePart);

  virtual IO::IoObject* readRoot(IO::IoObject* root=0);

private:
  class Impl;
  Impl& itsImpl;
};

// The second part of the hack to shorten mangled names.
#if defined(IRIX6) || defined(HP9000S700)
#undef AsciiStreamReader
typedef ASR AsciiStreamReader;
#endif

static const char vcid_asciistreamreader_h[] = "$Header$";
#endif // !ASCIISTREAMREADER_H_DEFINED
