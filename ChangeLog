* -*- outline -*-

* ChangeLog file
  $Id$

* Rob Peters <rjpeters@klab.caltech.edu>


* (done 25-Jan-2002) Logging
OK, have a simple scope nesting and timing architecture in place for
logging.

* (done 17-Jan-2002) More efficient bitmaps
Improve (startup time, memory use) for eyetracking stimulus scripts?
Things are speedier with queuePbmFile(), so that bitmaps are only loaded
when needed, and with purgeable bitmaps, so that the memory is freed
immediately after the bitmap is drawn. This is a reasonable tradeoff if
each image is going to be displayed relatively few times compared to the
overall number of images used.

* (done 28-Jan-2002) decode responses by a Tcl 'proc'
Implemented a first attempt at allowing responses to be decoded by a
"proc"-like Tcl code block, rather than by a regular expression
mapping. Eventually the old regex approach can probably be encapsulated
within the new more flexible approach.

* (done 28-Jan-2002) multiple responses within a single Trial run
OK, added a "maxResponses" attribute to EventResponseHdlr so that we can
specify an arbitrary number of responses (instead of the default, 1) to be
allowed in each activation cycle, before the response handler goes quiet.

* (28-Jan-2002, done 30-Jan-2002) generic Tcl code wrapper
Would be nice to have a reusable class that can wrap a Tcl procedure that
can be serialized and deserialized. We are already doing this in practice
in ExptDriver (with the doUponCompletion script) and in EventResponseHdlr
(with the responseProc). Should be able to refactor out the common
code. OK, I extracted TclProcWrapper from EventResponseHdlr's former
ResponseProc class, and made it an IO::IoObject (all this after much
painful debugging that was eventually solved by Electric Fence). Next step
is to extract it physically, and then re-use it in ExptDrvier. This should
eventually be a very useful and powerful class -- it's a nice interface to
provide extensible hooks + callbacks. [30-Jan] OK, extracted out
Tcl::ProcWrapper and put it into place in ExptDriver. This is looking like
a nice powerful tool now.

* (24-Aug-2001, done 31-Jan-2002) infix member function calls in Tcl
So we can do "$f eyeHeight 0.4" rather than "Face::eyeHeight $f 0.4". I
don't think I'll have a problem getting the mechanics of the function calls
set up... but the problem is, how to get Tcl commands registered for all of
the objects? Or just resort to using "unknown"? Or... just set up
inheritance, so that for example, the "Face" namespace in Tcl inherits all
the commands in "GrObj", "GxNode", and "IO", for example. [3-Sep-2001]
Hmmm, no, the real problem is not how to get Tcl commands registered (this
could be done in the Convert::toTcl functions), but rather how to allow
easy vectorization of commands?  Maybe all my OO stuff could go under a Tcl
cmd "with", so we can do "with $f eyeHeight 0.4", which would work whether
$f was single- or multi-valued. [31-Jan-2001] Could get working notation
using namespace eval in a special oo command, perhaps named "->". Need to
provide a way for Tcl::Pkg's to inherit() the functions in other
packages. The idea would be that a Pkg would first inherit() all the
necessary functions, then it would define its own functions. That way in
case of a name conflict, the new function would overwrite ("hide") the
inherited function. We could still access the overwritten function with an
explicit qualification. Done -- added a "->" command that provides infix
syntax. Inheritance is managed through namespace importing/exporting via
Tcl::Pkg::inherit().

* (31-Jan-2002, done 1-Feb-2002) Add fstring operator!=().

* (30-Jan-2002, done 2-Feb-2002) Segfault on "? new".
Fixed: Re-fixed the local function lookupCmd(), so that it won't crash if
it is passed a command name that refers to a non-Tcl::Command command (such
as a tcl proc). Apparently my idiom of dynamic_cast<>(static_cast<>()) was
not sufficient to test whether we actually had a valid Tcl::Command*;
instead I now just manage a std::set<void*> holding the addresses of valid
Tcl::Command's.

* (23-Feb-2002, done 23-Feb-2002) shared libraries on OS X?

  with SHLIB_CMD := cc -dynamiclib -flat_namespace -undefined suppress -o
    --> libraries build ok
    --> executable links ok
    --> executable fails at startup due to undefined c++ iostream symbols
    --> adding -lcc_dynamic to each of the link commands doesn't help

  Aha! need to use "c++" instead of "cc", with -lcc_dynamic, so we have:
    c++ -dynamiclib -flat_namespace -undefined suppress -o {name} -lcc_dynamic

* (23-Sep-2000, nix 14-June-2002) log-file?
Should have a log-file that can catch non-essential messages (such as the
timing info that is emitted by TrialEvent destructors). [nix
this... logging is now improved somewhat with Util::log]

* (14-Jun-2002, done 17-Jun-2002) Fix dynamic loading
so that we don't have to link in matlab stuff to the main executable, but
just to the mtx package.

Get this bogus crap:

[hume 16:52 52]% testsh
(1) testsh> package require Mtx
couldn't load file "/cit/rjpeters/local/i686/lib/visx/mtx.so":
 /usr/local/matlab/extern/lib/glnx86/libut.so: undefined symbol: _start

Aha. Have to use the linker option --export-dynamic, so that libut.so can
find the _start symbol which is of course defined next to wherever main()
is defined, which would be in the executable itself.

* (note 2-Jul-2002) OS X porting note: -install_name with ld
Ran into problems with tk8.4a4; specifically, got "could not find dynamic
library libtk8.4a4.dylib" at runtime when trying to run testsh. The problem
was in the Tk makefile, which failed to set the -install_name option when
ld'ing the dylib.

* (16-Aug-2001, done 5-July-2002) Bounding boxes for all GxNode objects?
How do we allow a Position, for example, to return/transform a
bounding box? ... OK, the GxNode function takes a Rect reference, so
that subclasses can either transform or extend that Rect.

[Later] OK, this was done by having all of the bounding box calculations
take place actually with 3-D bounding cubes... that allows us to properly
account for the effects of arbitrary coordinate transformations. Only at
the final stage do we extract a 2-D screen-aligned bounding "box" from the
cube.

* (21-Jun-1999, done 26-Sep-2002) GL coordinates <--> visual angle
This is basically already in place with Togl::setViewingDistance
and Togl::setUnitAngle.

* (May-1999, nix 26-Sep-2002) Implement GLenums without STL maps
Probably best to use Tcl_Index API's, to search for matching string in
array, and retrieve its index. [Later] This issue is mostly moot now, since
the problems with STL maps was just an issue of long compiles on old HP
machines, but is not a significant problem now with linux/gcc.

* (5-Oct-1999, ok 26-Sep-2002) TimingHdlr response behavior?
Maybe TimingHdlr should have a toggle switch to indicate
what the behavior should be when a response is seen. (Whether to
cancel StartEvents, etc.). [Later] I think we have a decent heuristic in
place here now: namely, if the response-queue is non-empty, then we cancel
the start events and schedule the response events, otherwise we do nothing.

* (14-Dec-1999, ok 26-Sep-2002) Need Canvas& argument to GrObj::grGetBoundingBox
OK, this stuff has been in place for a while now.

* (1-Nov-2002, done 4-Nov-2002) Get all Value-subclasses to be Tcl::Convert'ed

Maybe need to use function overloading instead of partial specialization?
Function overloading is more flexible, allowing subclasses to be passed via
reference-to-base-class.

Strategy: First add a set of template functions that just forward to the
current Tcl::Convert functions. Then, hid the old template functions to
force all clients to use the new interface. Then, gradually add overloads
of the new template functions. Eventually, none of the old specializations
will be needed, and then they can be phased out.

** Best names for functions?

   fromTcl()/toTcl() ?
   toNative()/fromNative() ?
   export()/import() ?

** How to specialize fromTcl() for Value types?

   The problem is that we can't return by value (no pun), but need to
   return through a reference, since we don't know in advance what type of
   Value object we're going to be dealing with. Would like to specify
   somehow that "all Value objects should be gotten from Tcl by assigning
   to them through an fstring". Aha... just needed a bit of template
   metaprogramming a la "Loki" here.

* (9-Nov-2002, done 13-Nov-2002) GLUtil just has font functions
  Make a new font class? Or move this stuff into Gtext? Yes, yes, yes. OK,
  GLUtil is history. We have a GxFont class now, with raster-font and
  vector-font implementations, which is used by Gtext.

* (13-Nov-2002, done 20-Nov-2002) Cleanup GrObj once and for all
  OK, replaced Gnode with GxBin. Changed all of the Gnode subclasses into
  generic Gx* node subclasses. So now I feel better; all the stuff is
  generic. In principle GrObj could become a Gx* class now itself.

* (done 20-Nov-2002) Rename GrObj --> GxShapeKit

* (done 20-Nov-2002) Rename Position --> GxTransform

* (9-Nov-2002, done 20-Nov-2002) X11Util just has findColormap()
  Moved this back into Togl.
