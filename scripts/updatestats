#!/usr/bin/env tclsh

set rawfilename "logs/CompileStats"
set tallyfilename "logs/CompileStatsTally"

proc readfile { fname } {
    if { ![file exists $fname] } { return }

    set f [open $fname r]

    while { [gets $f line] != -1 } {
        set name [lindex $line 0]

        set count 1
        if { [llength $line] > 1 } {
            set count [lindex $line 1]
        }

        if { [info exists ::COUNTS($name)] } {
            incr ::COUNTS($name) $count
        } else {
            set ::COUNTS($name) $count
        }
    }

    close $f
}

proc writefile { fname } {
    foreach name [array names ::COUNTS] {
        lappend stems([file tail $name]) $name
    }

    foreach name [array names stems] {
        set files [lsort -unique $stems($name)]
        set file_exist_count 0
        set total_count 0
        set existing_file ""
        foreach f $files {
            if { [file exists $f] } {
                incr file_exist_count
                set existing_file $f
            }
            incr total_count $::COUNTS($f)
        }

        if { $file_exist_count == 0 } {
            puts "no existing file with the given stem, need help:"
            puts $files
            exit
        }

        if { $file_exist_count > 1 } {
            puts "too many files with the same stem, need help:"
            puts $files
            exit
        }

        if { [llength $files] > 1} {
            puts "collating files:"
            puts "'$files' --> $existing_file"
        }

        set newcounts($existing_file) $total_count
    }

    set f [open $fname w]

    foreach name [lsort [array names newcounts]] {
        if { ![file exists $name] } {
            error "no file named '$name'"
        }
        puts $f [format "%-40s %d" $name $newcounts($name)]
    }

    close $f
}

proc backup { fname } {
    if { [file exists $fname] } {
        file delete ${fname}.bkp
        file rename $fname ${fname}.bkp
    }
}

#
# Read data from the raw file
#

readfile $rawfilename

#
# Read data from the old tally file
#

readfile $tallyfilename

#
# Save the new counts to a new tally file
#

writefile ${tallyfilename}.new

#
# Save backups of the old raw and tally files
#

backup $rawfilename
backup $tallyfilename

file rename ${tallyfilename}.new $tallyfilename

exit
