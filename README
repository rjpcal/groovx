########################## -*- text -*- ##################################
#
# A framework for visual experiments
#
# Copyright (c) 1998-2004 Rob Peters rjpeters at klab dot caltech dot edu
#
# $Id$
#
##########################################################################

1. Overview

   This is a C++ toolkit for writing visual psychophysics
   experiments. Various abstractions relating to experiments (visual
   objects, trials, observer responses, etc.) are implemented in C++, and
   are exposed through a Tcl interface as scriptable objects.

2. Organization of the files

   The src/ directory contains subdirectories for each of the various
   components of the system. Packages that are configured to be loadable at
   run-time are found in src/pkgs/.

   When the system is built, the object files go into a hierarchy within
   obj/$ARCH/ that parallels src/. That is, a source file src/foo/bar.cc
   will be compiled to obj/i686/foo/bar.o if your system architecture is
   i686.

3. Dependencies

   (Assume /path/to/install is where you will install local packages)
   (Assume /path/to/source is where you unpack and build these packages)

   This software requires these development packages:

     * Tcl/Tk (version 8.4 or later)
     * X11 windowing system
     * OpenGL
     * libz (gzip library)

   The following additional packages are optional. The configure script
   should generally be able to detect whether you have them installed or
   not and set up the Makefile appropriately.

     * libpng (portable network graphics library)
     * libjpeg (jpeg image handling library)
     * matlab (allows running a matlab engine inside the groovx shell)

   The following packages are optional, but are used in some of the scripts
   that use the groovx software.

     * itcl and itk (itcl3.2.1_src.tgz)

       # note that the itcl+itk configure script expects to find the
         tcl+tk sources sitting in the location where you built
         them... so, don't remove the tcl+tk sources until after you
         build and install itcl+itk

       cd /path/to/source
       tar xfz itcl3.2.1_src.tgz
       cd itcl3.2.1
       ./configure  --prefix=/path/to/install
       make
       make install

     * iwidgets (iwidgets4.0.1.tar.gz)

       # again, note that iwidgets expects to still be able to find the
         source code from the itcl/itk build, so don't remove the itcl+itk
         sources until after you've configured and installed iwidgets

       cd /path/to/source
       tar xfz iwidgets4.0.1.tar.gz
       cd iwidgets4.0.1
       ./configure  --prefix=/path/to/install \
         --with-itcl=/path/to/source/itcl3.2.1 \
         --with-itk=/path/to/source/itcl3.2.1
       # no need to do "make", just do "make install"
       make install




4. Configuration

   Configuration is done with a standard autoconf-generated configure
   script. To run the script with the default options, just do:

       ./configure

   To see a description of available configuration options, do:

       ./configure --help

   Some important options:

       --enable-debug={no|yes}

           determines whether to include runtime debuggability into the
           executable. If 'yes' (the default), then certain commands will
           be available in the shell to control debug verbosity and stack
           tracing.

5. Building

   Once you have all package dependencies installed, and run the configure
   script, just type "make" and everything should build and install. A
   short test suite (takes ~10 seconds on a 1GHz Pentium III Linux machine)
   is run at the end of every "make" invocation.

   * environment variables

     LD_LIBRARY_PATH

     On Linux, you need to make sure that your LD_LIBRARY_PATH environment
     variable includes the paths to wherever you have installed the
     libraries associated with this package.

6. Portability

   This software in its current state is known to build successfully under
   RedHat Linux 7.x, and under Mac OS X 10.1.x. Earlier versions of the
   software have been built successfully under SGI's IRIX6 and HP's HPUX
   10.x, but these configurations have not been tested recently.

   The software requires a reasonable C++ std-compliant compiler. Compilers
   that have worked successfully in the past include:

     g++ 2.95.x (linux, Mac OS X)
     g++ 3.0.x (linux)
     g++ 3.1.x (linux, Mac OS X)
     g++ 3.2.x (linux)
     g++ 3.3.x (linux, Mac OS X)
     Intel's icc 6.0 (linux)
     SGI's MIPSpro (irix6)

7. Contact information

   Any questions about the software should be directed to its author:

     Rob Peters
     California Institute of Technology
     Mail Code 139-74
     Pasadena, CA 91125
     (626) 395-2882
     rjpeters at klab dot caltech dot edu
     www.klab.caltech.edu/rjpeters/
     www.klab.caltech.edu/rjpeters/groovx/

