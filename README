########################## -*- text -*- ##################################
#
# A framework for visual experiments
#
# Copyright (c) 1998-2002 Rob Peters rjpeters@klab.caltech.edu
#
# $Id$
#
##########################################################################

1. Overview

   This is a C++ toolkit for writing visual psychophysics
   experiments. Various abstractions relating to experiments (visual
   objects, trials, observer responses, etc.) are implemented in C++, and
   are exposed through a Tcl interface as scriptable objects.

2. Organization of the files

   The src/ directory contains subdirectories for each of the various
   components of the system. Packages that are configured to be loadable at
   run-time are found in src/pkgs/.

   When the system is built, the object files go into a hierarchy within
   obj/$ARCH/ that parallels src/. That is, a source file src/foo/bar.cc
   will be compiled to obj/i686/foo/bar.o if your system architecture is
   i686.

3. Dependencies

   (Assume /path/to/install is where you will install local packages)
   (Assume /path/to/source is where you unpack and build these packages)

   This software requires the following packages:

     * Tcl/Tk (version 8.4b1 or later)

       Note that you'll need to install all of the tkInt*.h files to an
       include directory, in addition to the other tk*.h files that are
       normally installed as part of tk. That is:

       cd /path/to/source/tk8.4b1
       cp generic/tkInt*.h /path/to/install/include

     * X11 windowing system
     * OpenGL
     * libz (gzip library)

   The following packages are not critical, but are expected by default in
   the Makefile, so some source hacking might be necessary to disable them.

     * libpng (portable network graphics library)
     * matlab (allows running a matlab engine inside the grsh shell)

   The following packages are optional, but are used in some of the scripts
   that use the grsh software.
   
     * itcl and itk (itcl3.2.1_src.tgz)

       # note that the itcl+itk configure script expects to find the
         tcl+tk sources sitting in the location where you built
         them... so, don't remove the tcl+tk sources until after you
         build and install itcl+itk
   
       cd /path/to/source
       tar xfz itcl3.2.1_src.tgz
       cd itcl3.2.1
       ./configure  --prefix=/path/to/install
       make
       make install
   
     * iwidgets (iwidgets4.0.0.tar.gz)
   
       cd /path/to/source
       tar xfz iwidgets4.0.0.tar.gz
       cd iwidgets4.0.0
       ./configure  --prefix=/path/to/install \
         --with-itcl=/path/to/source/itcl3.2.1/itcl \
         --with-itk=/path/to/source/itcl3.2.1/itk
       # no need to do "make", just do "make install"
       make install
      

     

4. Makefile configuration

   There is currently no autoconf/configure script to do Makefile
   configuration at the present time. Instead, top-level configuration
   options are listed together at the top of the Makefile. These include
   options for specifying where the software should be installed, and for
   specifying where various dependencies are installed.

5. Building

   Once you have all package dependencies installed, and done any necessary
   customization to the Makefile, just type "make" and everything should
   build and install. A short test suite (takes ~10 seconds on a 1GHz
   Pentium III Linux machine) is run at the end of every "make" invocation.

   * debug vs. production

     Depending on the architecture, either the debug or production version
     will be the default version that is built with "make". To override the
     default, type either "make MODE=prod" for the production version, or
     "make MODE=debug" for the debug version. The two versions build
     separate object files and shared libraries, so it is possible for
     builds of both types to peacefully coexist.

     By convention, the debug executable is called "testsh", while the
     production executable is called "grshX.X", where "X.X" specifies the
     version number of the program.

   * environment variables

     LD_LIBRARY_PATH

     On Linux, you need to make sure that your LD_LIBRARY_PATH environment
     variable includes the paths to wherever you have installed the
     libraries associated with this package.

     GRSH_LIB_DIR

     Some components of the grsh software that are accessed at runtime are
     found in the directory that is specified by the environment variable
     GRSH_LIB_DIR. These components include the default audio files,
     various accessory and demo scripts that can be run using the grsh
     shell, and sample serialized object databases that can be loaded into
     the program.

     All of these components are found in the share/ subdirectory of the
     source tree. If you plan to keep the source tree around, you can just
     set your GRSH_LIB_DIR environment variable to
     /path/to/source/share. If you delete the source tree, then you should
     first copy the share/ subdirectory to a more permanent location, and
     then set your GRSH_LIB_DIR environment variable to
     /path/to/install/share.

6. Portability

   This software in its current state is known to build successfully under
   RedHat Linux 7.x, and under Mac OS X 10.1.x. Earlier versions of the
   software have been built successfully under SGI's IRIX6 and HP's HPUX
   10.x, but these configurations have not been tested recently.

   The software requires a reasonable C++ std-compliant compiler. Compilers
   that have worked successfully in the past include:

     g++ 2.95.x (linux, Mac OS X)
     g++ 3.0.x (linux)
     g++ 3.1.x (linux)
     Intel's icc 6.0 (linux)
     HP's aCC (hpux 10.x)
     SGI's MIPSpro (irix6)

7. Contact information

   Any questions about the software should be directed to its author:

     Rob Peters
     California Institute of Technology
     Mail Code 139-74
     Pasadena, CA 91125
     (626) 395-2882
     rjpeters@klab.caltech.edu
     www.klab.caltech.edu/rjpeters/
     www.klab.caltech.edu/rjpeters/grsh/

