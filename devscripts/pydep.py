#!/usr/bin/env python2

# This is a quick script to build a dependency file suitable for
# inclusion into a Makefile, by scanning for source files ('.cc'
# files) within a source tree passed as a command-line argument.

# $Id$

import os
import re
import sys

PATH = os.path.normpath(sys.argv[1])

DEPS = {}

FLATDEPS = {}

arch = os.getenv('ARCH')
OBJDIR = 'obj/' + arch

def sort(seq):
    seq.sort()
    return seq

include_regex = re.compile('^\s*#\s*include\s*"(.*)"')

def findFlatDeps(file):
    if not FLATDEPS.has_key(file):
        FLATDEPS[file] = []
        f = open(file, 'r')
        for line in f.readlines():
            match = include_regex.match(line)
            if not match:
                continue
            dependency = os.path.join(PATH,match.group(1))
            if os.path.isfile(dependency):
                FLATDEPS[file].append(dependency)
            else:
                print >>sys.stderr, 'in file: ', file,
                print >>sys.stderr, ', missing dependency: ', dependency
        f.close()

    return FLATDEPS[file]


def addRecursiveDeps(target, rootdep):
    DEPS[target][rootdep] = 1

    flatdeps = findFlatDeps(rootdep)
    for dep in flatdeps:
        addRecursiveDeps(target, dep)


def findincludes(file):
    if not DEPS.has_key(file):
        DEPS[file] = {}
        addRecursiveDeps(file, file)


def visit(arg, dirname, contents):
    if os.path.basename(dirname)[0].isupper():
        return
    for file in contents:
        if not file[-3:] == '.cc':
            continue
        fullname = os.path.join(dirname,file)
        findincludes(fullname)


def printTarget(file):
    parts = file.split('/')

    assert parts[0] == PATH
    stem = '.'.join(parts[1:])

    (stem, ext) = os.path.splitext(stem)
    assert ext == '.cc'

    global OBJDIR
    sys.stdout.write('\n\n%s/%s.do %s/%s.o:' % (OBJDIR, stem, OBJDIR, stem))

    for dep in sort(DEPS[file].keys()):
        sys.stdout.write(' \\\n\t%s' % dep)


#
# Run
#

os.path.walk(PATH, visit, None)

header = "# Do not edit this file! It is automatically generated. Changes will be lost."

sys.stdout.write(header)

for file in sort(DEPS.keys()):
    printTarget(file)

sys.stdout.write('\n')
