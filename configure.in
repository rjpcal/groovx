dnl Process this file with autoconf to produce a configure script.
dnl
dnl Copyright (c) 2002-2002 Rob Peters rjpeters@klab.caltech.edu
dnl
dnl $Revision$

AC_INIT(grsh, [0.8a8], [rjpeters@klab.caltech.edu])

# If CXXFLAGS was not already set, then set it now to keep autoconf from
# adding "-g -O2".

if test "${CXXFLAGS+set}" != "set" ; then
    CXXFLAGS=""
fi

dnl Compiler checks.

AC_LANG(C++)
AC_PROG_CXX(g++-3 g++ c++)

dnl Checks for libraries.

dnl Checks for header files.
AC_PATH_XTRA

### Check for audio header files and libraries

AC_CHECK_HEADERS([limits iosfwd iostream fstream sstream])
AC_CHECK_HEADER([dmedia/audio.h],
		[AC_DEFINE(HAVE_DMEDIA_AUDIO_H,1)
		 LIBS="$LIBS -laudio -laudiofile"])

AC_CHECK_HEADER([Alib.h],
		[AC_DEFINE(HAVE_ALIB_H,1) LIBS="$LIBS -lAlib"])

AC_CHECK_HEADER([esd.h],
		[AC_DEFINE(HAVE_ESD_H,1)
		 LIBS="$LIBS -lesd -laudiofile"])

### Check support for c++ iostreams

AC_MSG_CHECKING([whether c++ compiler supports standard iostreams])

AC_TRY_COMPILE([#include <iostream>], [std::ios_base* p;],
		AC_MSG_RESULT(yes),
		[AC_DEFINE(PRESTANDARD_IOSTREAMS, 1) AC_MSG_RESULT(no)])

have_std_io=no

AC_MSG_CHECKING([whether iostreams are in std namespace])

AC_TRY_COMPILE([#include <iostream>], [std::iostream* p;],
		have_std_io=yes)

if test $have_std_io = no; then
   AC_TRY_COMPILE([#include <iostream.h>], [std::iostream* p;],
		   have_std_io=yes)
fi

AC_MSG_RESULT($have_std_io)

if test $have_std_io = yes; then
   AC_DEFINE(STD_IO, std)
else
   AC_DEFINE(STD_IO, [])
fi

###

AC_MSG_CHECKING([whether OpenGL implementation is Mesa])

# display lists don't work at present with i686/linux/mesa

AC_EGREP_HEADER(MESA, [GL/gl.h],
		[AC_DEFINE(BROKEN_GL_DISPLAY_LISTS,1) AC_MSG_RESULT(yes)],
		AC_MSG_RESULT(no))

dnl AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
dnl AC_TYPE_MODE_T
dnl AC_TYPE_SIZE_T
dnl AC_HEADER_TIME
dnl AC_STRUCT_TM

dnl Checks for library functions.
dnl AC_HEADER_STDC
dnl AC_FUNC_STRFTIME
dnl AC_CHECK_FUNCS(getcwd gettimeofday select strerror)

dnl Setup linking options

LDFLAGS="$LDFLAGS -Wl,-rpath,\${exec_prefix}/lib"
LDFLAGS="$LDFLAGS -L\${exec_prefix}/lib"

###

AC_MSG_CHECKING([for location of tcltk8.4])

AC_ARG_WITH(tcltk,
	    AC_HELP_STRING([--with-tcltk=DIR],
			   [specify where tcl/tk >= 8.4 are installed [/usr/local]]),
	    ,
	    with_tcltk=/usr/local)

AC_MSG_RESULT($with_tcltk)

# Need to *prepend* with_tcltk/include to CPPFLAGS, so that we find
# tcl.h, tk.h, etc. in with_tcltk rather than in the standard system
# location

CPPFLAGS="-I${with_tcltk}/include $CPPFLAGS"

LDFLAGS="$LDFLAGS -Wl,-rpath,${with_tcltk}/lib -L${with_tcltk}/lib"

###

AC_MSG_CHECKING([whether to to enable matlab support])

AC_ARG_ENABLE(matlab,
	      AC_HELP_STRING([--enable-matlab],
			     [enable MATLAB support \[yes\]]),
	      ,
	      enable_matlab=yes)

AC_MSG_RESULT($enable_matlab)

if test $enable_matlab = yes; then
   CPPFLAGS="$CPPFLAGS -I/usr/local/matlab/extern/include"
dnl FIXME these lines are architecture-specific
   LDFLAGS="$LDFLAGS -L/usr/local/matlab/extern/lib/glnx86"
   LDFLAGS="$LDFLAGS -Wl,-rpath,/usr/local/matlab/extern/lib/glnx86"
   AC_DEFINE(WITH_MATLAB, 1)
fi

###

AC_MSG_CHECKING([whether to use GNU readline command editing in the shell])

AC_ARG_ENABLE(readline,
	      AC_HELP_STRING([--enable-readline],
	                     [enable GNU readline command editing [yes]]),
	      ,
	      enable_readline=yes)

AC_MSG_RESULT($enable_readline)

if test $enable_readline = yes; then
   LIBS="$LIBS -lreadline -ltermcap"
   AC_DEFINE(WITH_READLINE, 1)
fi

###

AC_MSG_CHECKING([whether to enable debug mode by default])

AC_ARG_ENABLE(default-debug,
	      AC_HELP_STRING([--enable-default-debug],
			     [whether the default build should include debugging (default=yes)]),
	      ,
	      enable_default_debug=yes)

AC_MSG_RESULT($enable_default_debug)

if test $enable_default_debug = yes; then
   AC_SUBST(DEFAULT_MODE, debug)
else
   AC_SUBST(DEFAULT_MODE, prod)
fi

AC_CONFIG_FILES([Makedefs])

AC_OUTPUT()
