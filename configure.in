dnl Process this file with autoconf to produce a configure script.
dnl
dnl Copyright (c) 2002-2002 Rob Peters rjpeters@klab.caltech.edu
dnl
dnl $Revision$

AC_INIT(grsh, [0.8a8], [rjpeters@klab.caltech.edu])
AC_PREREQ(2.53)
AC_REVISION($Revision$)

# If CXXFLAGS was not already set, then set it now to keep autoconf from
# adding "-g -O2".

if test "${CXXFLAGS+set}" != "set" ; then
    CXXFLAGS=""
fi

### Find operating system.

AC_MSG_CHECKING([for operating system])

OS=`uname`

AC_MSG_RESULT($OS)

### Find c++ compiler.

AC_LANG(C++)
AC_PROG_CXX(g++-3 g++ c++ CC)

case ${CXX}-${OS} in
   g++*)
      CXXFLAGS="$CXXFLAGS -W -Wdeprecated -Wall"
      CXXFLAGS="$CXXFLAGS -Wsign-promo -Wwrite-strings"
      GCC_VERSION=`$CXX -dumpversion`
      case $GCC_VERSION in
         2.9*) ;;
	 3.*) CXXFLAGS="$CXXFLAGS -Wno-system-headers" ;;
      esac
      case `uname -m` in
         i686) CXXFLAGS="$CXXFLAGS -march=i686";;
      esac
      case $OS in
         Darwin)
	    CXXFLAGS="$CXXFLAGS -dynamic"
	    # Need to use -install_name ${LIB_RUNTIME_DIR}/libname?
	    SHLIB_CMD="$CXX -dynamiclib -flat_namespace -undefined suppress -o"
	    STATLIB_CMD="libtool -static -o"
	    ;;
	 *)
	    SHLIB_CMD="$CXX -shared -o"
	    STATLIB_CMD="ar rus"
	    ;;
      esac
      DEBUG_CXXFLAGS="-O1 -g"
      PROD_CXXFLAGS="-O2"
      ;;
   CC-IRIX)
      CPPFLAGS="$CPPFLAGS -I$(HOME)/local/$(ARCH)/include/cppheaders"
      CXXFLAGS="$CXXFLAGS -mips3 -n32 -ptused -no_prelink -no_auto_include"
      CXXFLAGS="$CXXFLAGS -LANG:std -LANG:exceptions=ON"
      DEBUG_CXXFLAGS="-g -O0"
      # -O3 gave little improvement over -O2
      PROD_CXXFLAGS="-O2"
      SHLIB_CMD="$CXX -shared -Wl,-check_registry,/usr/lib32/so_locations -o"
      STATLIB_CMD="$CXX -ar -o"
      ;;
   *)
      AC_MSG_ERROR([unknown CXX-OS pair ${CXX}-${OS}])
      ;;
esac

AC_SUBST(DEBUG_CXXFLAGS)
AC_SUBST(PROD_CXXFLAGS)

AC_SUBST(SHLIB_CMD)
AC_SUBST(STATLIB_CMD)

### Arch-specific stuff

need_rpath=yes

case $OS in
   Linux)
      need_rpath=yes
      SHLIB_EXT=so
      STATLIB_EXT=a
      # Need this to allow symbols from the executable to be accessed by loaded
      # dynamic libraries; this is needed e.g. for the matlab libut.so library to
      # find the "_start" symbol.
      LDFLAGS="$LDFLAGS -Wl,--export-dynamic"
      ;;
   IRIX)
      need_rpath=yes
      SHLIB_EXT=so
      STATLIB_EXT=a
      AC_DEFINE(SHORTEN_SYMBOL_NAMES,1)
      ;;
   Darwin)
      need_rpath=no
      SHLIB_EXT=dylib
      STATLIB_EXT=a
      AC_DEFINE(ESD_WORKAROUND,1)
      # The /sw/lib and /sw/include directories are managed by Fink
      CPPFLAGS="$CPPFLAGS -I/sw/include"

      # We are slightly bending the rules here by putting a "-l" directive
      # in LDFLAGS (which normally should only have "-L" directives
      LDFLAGS="$LDFLAGS -L/sw/lib -lcc_dynamic"
      ;;
   *)
      AC_MSG_ERROR([unknown operating system $OS])
      ;;
esac

AC_SUBST(SHLIB_EXT)
AC_SUBST(STATLIB_EXT)

### Check c++ name mangling

AC_MSG_CHECKING([whether typeinfo::name() gives a mangled typename])

AC_TRY_RUN([#include <typeinfo>
#include <string.h>

namespace Q {
template <class T>
  struct foo {};
}

struct bar {};

int main()
{
  extern Q::foo<bar> p;
  return (strcmp("Q::foo<bar>", typeid(p).name()) == 0) ? 0 : 1;
}
],
[AC_DEFINE(NO_TYPENAME_MANGLING,1) AC_MSG_RESULT(no)],
AC_MSG_RESULT(yes))

dnl Checks for libraries.

dnl Checks for header files.
AC_PATH_XTRA

### Check for audio header files and libraries

AC_CHECK_HEADERS([limits iosfwd iostream fstream sstream],,,-)
AC_CHECK_HEADER([dmedia/audio.h],
		[AC_DEFINE(HAVE_DMEDIA_AUDIO_H,1)
		 LIBS="$LIBS -laudio -laudiofile"],,-)

AC_CHECK_HEADER([Alib.h],
		[AC_DEFINE(HAVE_ALIB_H,1) LIBS="$LIBS -lAlib"],,-)

AC_CHECK_HEADER([esd.h],
		[AC_DEFINE(HAVE_ESD_H,1)
		 LIBS="$LIBS -lesd -laudiofile"],,-)

### Check support for c++ iostreams

AC_MSG_CHECKING([whether c++ compiler supports standard iostreams])

AC_TRY_COMPILE([#include <iostream>], [std::ios_base* p;],
		AC_MSG_RESULT(yes),
		[AC_DEFINE(PRESTANDARD_IOSTREAMS, 1) AC_MSG_RESULT(no)])

have_std_io=no

AC_MSG_CHECKING([whether iostreams are in std namespace])

AC_TRY_COMPILE([#include <iostream>], [std::iostream* p;],
		have_std_io=yes)

if test $have_std_io = no; then
   AC_TRY_COMPILE([#include <iostream.h>], [std::iostream* p;],
		   have_std_io=yes)
fi

AC_MSG_RESULT($have_std_io)

if test $have_std_io = yes; then
   AC_DEFINE(STD_IO, std)
else
   AC_DEFINE(STD_IO, [])
fi

###

AC_MSG_CHECKING([whether OpenGL implementation is Mesa])

# display lists don't work at present with i686/linux/mesa

AC_EGREP_HEADER(MESA, [GL/gl.h],
		[AC_DEFINE(BROKEN_GL_DISPLAY_LISTS,1) AC_MSG_RESULT(yes)],
		AC_MSG_RESULT(no))

dnl AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
dnl AC_TYPE_MODE_T
dnl AC_TYPE_SIZE_T
dnl AC_HEADER_TIME
dnl AC_STRUCT_TM

dnl Checks for library functions.
dnl AC_HEADER_STDC
dnl AC_FUNC_STRFTIME
dnl AC_CHECK_FUNCS(getcwd gettimeofday select strerror)

dnl Setup linking options

if test $need_rpath = yes; then
   LDFLAGS="$LDFLAGS -Wl,-rpath,\${exec_prefix}/lib"
fi
LDFLAGS="$LDFLAGS -L\${exec_prefix}/lib"

###

AC_MSG_CHECKING([for location of tcl+tk >= 8.4])

AC_ARG_WITH(tcltk,
	    AC_HELP_STRING([--with-tcltk=DIR],
			   [specify where tcl+tk >= 8.4 are installed [/usr/local]]),
	    ,
	    with_tcltk=/usr/local)

AC_MSG_RESULT($with_tcltk)

# Need to *prepend* with_tcltk/include to CPPFLAGS, so that we find
# tcl.h, tk.h, etc. in with_tcltk rather than in the standard system
# location

CPPFLAGS="-I${with_tcltk}/include $CPPFLAGS"

if test $need_rpath = yes; then
   LDFLAGS="$LDFLAGS -Wl,-rpath,${with_tcltk}/lib"
fi
LDFLAGS="$LDFLAGS -L${with_tcltk}/lib"

AC_MSG_CHECKING([for tcl+tk versions])

TCL_VERSION=`sh -c ". ${with_tcltk}/lib/tclConfig.sh ; echo \\$TCL_VERSION"`
TK_VERSION=`sh -c ". ${with_tcltk}/lib/tkConfig.sh ; echo \\$TK_VERSION"`

AC_MSG_RESULT([tcl ($TCL_VERSION), tk ($TK_VERSION)])

LIBS="$LIBS -ltcl${TCL_VERSION} -ltk${TK_VERSION}"

###

AC_MSG_CHECKING([whether to to enable matlab support])

AC_ARG_ENABLE(matlab,
	      AC_HELP_STRING([--enable-matlab],
			     [enable MATLAB support \[yes\]]),
	      ,
	      enable_matlab=yes)

AC_MSG_RESULT($enable_matlab)

if test $enable_matlab = yes; then
   CPPFLAGS="$CPPFLAGS -I/usr/local/matlab/extern/include"
dnl FIXME these lines are architecture-specific
   LDFLAGS="$LDFLAGS -L/usr/local/matlab/extern/lib/glnx86"
   if test $need_rpath = yes; then
      LDFLAGS="$LDFLAGS -Wl,-rpath,/usr/local/matlab/extern/lib/glnx86"
   fi
   AC_DEFINE(WITH_MATLAB, 1)
fi

###

enable_readline=yes

AC_CHECK_HEADERS([readline/readline.h readline/history.h],
		  , enable_readline=no,-)

AC_MSG_CHECKING([for readline libraries])

orig_libs=$LIBS
readline_libs=""

if test $enable_readline = yes; then
   LIBS="$LIBS -lreadline"
   readline_libs="-lreadline"
   AC_TRY_LINK([#include <stdio.h>
                #include <readline/readline.h>],
	       [rl_callback_handler_install(0,0)],
               enable_readline=yes, enable_readline=no)
   if test $enable_readline = no; then
      LIBS="$LIBS -ltermcap"
      readline_libs="$readline_libs -ltermcap"
      AC_TRY_LINK([#include <stdio.h>
		   #include <readline/readline.h>],
		  [rl_callback_handler_install(0,0)],
                  enable_readline=yes, enable_readline=no)
   fi
fi

if test $enable_readline = yes; then
   AC_DEFINE(WITH_READLINE, 1)
   AC_MSG_RESULT([yes ($readline_libs)])
else
   LIBS=$orig_libs
   AC_MSG_RESULT(no)
fi

###

AC_MSG_CHECKING([whether to enable debug mode by default])

AC_ARG_ENABLE(default-debug,
	      AC_HELP_STRING([--enable-default-debug],
			     [whether the default build should include debugging (default=yes)]),
	      ,
	      enable_default_debug=yes)

AC_MSG_RESULT($enable_default_debug)

if test $enable_default_debug = yes; then
   AC_SUBST(DEFAULT_MODE, debug)
else
   AC_SUBST(DEFAULT_MODE, prod)
fi

AC_CONFIG_FILES([Makedefs])

AC_OUTPUT()
