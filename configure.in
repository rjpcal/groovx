dnl Process this file with autoconf to produce a configure script.
dnl
dnl Copyright (c) 2002-2005
dnl Rob Peters rjpeters at usc dot edu
dnl
dnl $Revision$
dnl
dnl --------------------------------------------------------------------
dnl
dnl This file is part of GroovX.
dnl
dnl GroovX is free software; you can redistribute it and/or modify it under
dnl the terms of the GNU General Public License as published by the Free
dnl Software Foundation; either version 2 of the License, or (at your
dnl option) any later version.
dnl
dnl GroovX is distributed in the hope that it will be useful, but WITHOUT
dnl ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
dnl FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
dnl for more details.
dnl
dnl You should have received a copy of the GNU General Public License along
dnl with GroovX; if not, write to the Free Software Foundation, Inc., 59
dnl Temple Place, Suite 330, Boston, MA 02111-1307 USA.

AC_INIT([GroovX],[1.0a1],[rjpeters at usc dot edu])
AC_PREREQ(2.57)
AC_REVISION($Revision$)

### New macro definitions

# AC_CHECK_LIB_CXX(libname, includes, function-call,
#                  action-on-success, action-on-fail)
AC_DEFUN([AC_CHECK_LIB_CXX],
	 [AC_MSG_CHECKING([for lib$1])
	 libs_save=$LIBS
	 LIBS="$LIBS -l$1"
	 AC_LINK_IFELSE([AC_LANG_PROGRAM([[$2]], [[$3]])],
	                [havelib_$1=yes],
			[havelib_$1=no])
	 LIBS=$libs_save
	 if test $havelib_$1 = yes; then
	    AC_MSG_RESULT(yes)
	    $4
	 else
	    AC_MSG_RESULT(no)
	    $5
	 fi])

# AC_LATE_WARN(msg) msg will be given as a warning, and will be repeated at
# the end of running the configure script, making it more likely that the
# user will notice it.
AC_DEFUN([AC_LATE_WARN],
[AC_MSG_WARN([$1])
late_warnings="${late_warnings}
* $1"])

# AC_GIVE_LATE_WARNINGS() actually print the late warnings
AC_DEFUN([AC_GIVE_LATE_WARNINGS],
[if test "$late_warnings" != ""; then
   AC_MSG_WARN([$late_warnings])
fi])

late_warnings=""

# If CXXFLAGS was not already set, then set it now to keep autoconf from
# adding "-g -O2".

if test "${CXXFLAGS+set}" != "set" ; then
    CXXFLAGS=""
fi

##########################################################################
### Find operating system.

AC_MSG_CHECKING([for operating system])

OS=`uname`

AC_MSG_RESULT($OS)

##########################################################################
### Find/choose windowing system.

AC_ARG_ENABLE(aqua,
	      [AC_HELP_STRING([--enable-aqua],
		              [whether to use Mac OS X Aqua window system instead of X11 [no]])],
	      ,
	      enable_aqua=no)

AC_MSG_CHECKING([for windowing system])

if test "$enable_aqua" = "yes"; then
   windowsystem=aqua
   AC_MSG_RESULT([Mac OS X Aqua])
   AC_DEFINE(GVX_GL_PLATFORM_AGL,1,[use Apple OpenGL windowsystem interface (agl)])
   AC_DEFINE(MAC_OSX_TK,1,[using the OS X version of Tk])
else
   windowsystem=x11
   AC_MSG_RESULT([X11])
   AC_DEFINE(GVX_GL_PLATFORM_GLX,1,[use X11 OpenGL windowsystem interface (glx)])
fi

AC_SUBST(windowsystem)

##########################################################################
### Find c++ compiler and linkers.

AC_LANG(C++)
AC_PROG_CXX(g++-3 g++ c++ CC)

AC_PROG_CXXCPP

BUILD="build"
AC_SUBST(BUILD)

CPPFLAGS="$CPPFLAGS -I${BUILD}/compat/include"
LDFLAGS="$LDFLAGS -L${BUILD}/compat/lib"

AC_DEFINE(GVX_ENFORCE_FACTORY_FUNCTIONS,1,
	  [make operator new+delete protected to force factory functions?])
AC_DEFINE(GVX_DTOR_NOTHROW,[throw()],
	  [should Nub::RefCounted and Nub::Object have a no-throw destructor?])
AC_DEFINE(GVX_DEFAULT_REFVIS,[PUBLIC],
	  [initial default RefVis to use when Nub::Ref and Nub::SoftRef objects are constructed?])

case ${CXX}-${OS} in
   *g++*)
      CXXFLAGS="$CXXFLAGS -W -Wdeprecated -Wall"
      CXXFLAGS="$CXXFLAGS -Wsign-promo -Wwrite-strings"
      AC_MSG_CHECKING([for g++ version])
      GCC_VERSION=`$CXX -dumpversion`
      AC_MSG_RESULT($GCC_VERSION)
      case $GCC_VERSION in
         2.9*) ;;
	 3.4.0) CPPFLAGS="$CPPFLAGS -Wno-system-headers -DMEMBER_TEMPLATES_BROKEN" ;;
	 3.*) CXXFLAGS="$CXXFLAGS -Wno-system-headers" ;;
      esac
      case `uname -m` in
         i686) CXXFLAGS="$CXXFLAGS -march=i686";;
      esac
      case $OS in
         Darwin)
	    CXXFLAGS="$CXXFLAGS -dynamic"
	    # Need to use -install_name ${LIB_RUNTIME_DIR}/libname?
	    SHLIB_CMD="$CXX -dynamiclib -undefined error -multiply_defined suppress -o"
	    STATLIB_CMD="libtool -static -o"
	    ;;
	 *)
	    SHLIB_CMD="$CXX -shared -o"
	    STATLIB_CMD="ar rus"
	    ;;
      esac
      cxxflags_debug="-O1 -g"
      cxxflags_prod="-O2"
      ;;
   *icc*)
      #1418: external definition with no prior declaration
      #1419: external declaration in primary source file
      #177: variable [] was declared but never referenced
      #193: zero used for undefined preprocessing identifier
      #279: controlling expression is constant
      #383: value copied to temporary, reference to temporary used
      #424: extra ";" ignored
      #444: destructor for base class [] is not virtual
      #530: inline function [] cannot be explicitly instantiated
      #810: conversion from "double" to "int" may lose significant bits
      #981: operands are evaluated in unspecified order
      CXXFLAGS="$CXXFLAGS -Wall -Werror -wd177,1418,279,383,981,444,810,1419,424,530,193"
      cxxflags_debug="-g -O1"
      cxxflags_prod="-O2"
      SHLIB_CMD="$CXX -shared -o"
      STATLIB_CMD="ar rus"
      ;;
   CC-IRIX)
      CPPFLAGS="$CPPFLAGS -I$(HOME)/local/$(ARCH)/include/cppheaders"
      CXXFLAGS="$CXXFLAGS -mips3 -n32 -ptused -no_prelink -no_auto_include"
      CXXFLAGS="$CXXFLAGS -LANG:std -LANG:exceptions=ON"
      cxxflags_debug="-g -O0"
      # -O3 gave little improvement over -O2
      cxxflags_prod="-O2"
      SHLIB_CMD="$CXX -shared -Wl,-check_registry,/usr/lib32/so_locations -o"
      STATLIB_CMD="$CXX -ar -o"
      ;;
   *)
      AC_MSG_WARN([unknown CXX-OS pair ${CXX}-${OS}])
      cxxflags_debug="-g -O1"
      cxxflags_prod="-O2"
      SHLIB_CMD="$CXX -shared -o"
      STATLIB_CMD="ar rus"
      ;;
esac

AC_SUBST(SHLIB_CMD)
AC_SUBST(STATLIB_CMD)

##########################################################################
### Arch-specific stuff

need_rpath=yes

case $OS in
   Linux)
      need_rpath=yes
      SHLIB_EXT=so
      STATLIB_EXT=a
      # Need this to allow symbols from the executable to be accessed by loaded
      # dynamic libraries; this is needed e.g. for the matlab libut.so library to
      # find the "_start" symbol.
      LDFLAGS="$LDFLAGS -Wl,--export-dynamic"

      # Use these strict options to (1) avoid circular dependencies among
      # shared libraries, and (2) match Mac OS X's more strict linking
      # requirements.
      LDFLAGS="$LDFLAGS -Wl,--no-undefined -Wl,--warn-common"

      # May need this -Bsymbolic when using Intel's C++ compiler in order
      # to force our own shlib's to link against icc's C++ std lib rather than
      # against g++'s /usr/lib/libstdc++

      #LDFLAGS="$LDFLAGS -Wl,-Bsymbolic"
      ;;
   IRIX)
      need_rpath=yes
      SHLIB_EXT=so
      STATLIB_EXT=a
      AC_DEFINE(GVX_SHORTEN_SYMBOL_NAMES,1,[shorten symbol names?])
      ;;
   Darwin)
      need_rpath=no
      SHLIB_EXT=dylib
      STATLIB_EXT=a
      AC_DEFINE(GVX_ESD_WORKAROUND,1,[Darwin esd workaround])
      # The /sw/lib and /sw/include directories are managed by Fink
      CPPFLAGS="$CPPFLAGS -I/sw/include"

      # We are slightly bending the rules here by putting a "-l" directive
      # in LDFLAGS (which normally should only have "-L" directives
      LDFLAGS="$LDFLAGS -L/sw/lib -lcc_dynamic"
      ;;
   *)
      AC_MSG_ERROR([unknown operating system $OS])
      ;;
esac

if test $need_rpath = yes; then
   # We don't want to do this test unless we $need_rpath, because if we try
   # to do this under Darwin it causes later tests to fail (such as the
   # "virtual base class address-offsets" test).
   AC_MSG_CHECKING([for path to libstdc++])
   libstdcxx=`dirname \`$CXX -print-file-name=libstdc++.so\``
   libstdcxx=`cd $libstdcxx 2> /dev/null && /bin/pwd`
   LDFLAGS="$LDFLAGS -Wl,-rpath,$libstdcxx"
   AC_MSG_RESULT($libstdcxx)
fi

AC_SUBST(SHLIB_EXT)
AC_SUBST(STATLIB_EXT)

##########################################################################
### Check for programs other than compiler+linker.

AC_PATH_PROG([GVX_ANYTOPNM_PROG], [anytopnm], [])
if test "$GVX_ANYTOPNM_PROG" != ""; then
   AC_DEFINE_UNQUOTED(GVX_ANYTOPNM_PROG,"$GVX_ANYTOPNM_PROG",
                      [full path to anytopnm program])
fi

AC_PATH_PROG([GVX_GIFTOPNM_PROG], [giftopnm], [])
if test "$GVX_GIFTOPNM_PROG" != ""; then
   AC_DEFINE_UNQUOTED(GVX_GIFTOPNM_PROG,"$GVX_GIFTOPNM_PROG",
                      [full path to giftopnm program])
fi

AC_PATH_PROGS([DOXYGEN_PROG], [doxygen], [doxygen])
AC_SUBST(DOXYGEN_PROG)

##########################################################################
### Checks for compiler features.

### Check for virtual base class address-offset bug

AC_MSG_CHECKING([whether virtual base class address-offsets are ok])

AC_RUN_IFELSE([AC_LANG_SOURCE([[void* p1 = 0; void* p2 = 0;

struct A {
  virtual ~A() {};
  virtual void foo() { delete this; }
  int i;
};

struct B : public virtual A {
  virtual ~B() { p2 = (void*)this; }
};

int main()
{
  B* b = new B;
  p1 = (void*)b;
  b->foo();

  return (p1 == p2) ? 0 : 1;
}]])],
[AC_MSG_RESULT(yes)],
[AC_MSG_RESULT(no);
 AC_MSG_ERROR([$CXX has a virtual base class address-offset bug])],[])

### Check for virtual inheritance constructor bug

AC_MSG_CHECKING([whether construction under virtual inheritance is ok])

AC_RUN_IFELSE([AC_LANG_SOURCE([[
struct A                      { virtual ~A(); int x; };
struct B : public virtual A   { };
struct C : public B           { C(int); };
struct D : public C           { D(); };

int main()                    { D t; return 0; }

A::~A()                       {}
C::C(int)                     {}
D::D() : C(this->x)           {}
]])],
[AC_MSG_RESULT(yes)],
[AC_MSG_RESULT(no);
 AC_MSG_ERROR([$CXX has a virtual inheritance constructor bug])],[])

### Check whether "return void" is allowed in templates

AC_MSG_CHECKING([whether return void is allowed in templates])

AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
template <class R>
struct Foo
{
  template <class Func>
  static R bar(Func f)
  {
    return f();
  }
};

void baz() {}]], [[Foo<void>::bar(baz);]])],
[AC_MSG_RESULT(yes)],
[AC_MSG_RESULT(no);
 AC_MSG_ERROR([$CXX is broken: does not allow return void in templates])])

### Check various template peculiarities

AC_MSG_CHECKING([whether we can take the address of template functions])

AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[namespace Q {
  template <class T>
  void foo(T) {}
}
template <class F> void bar(F) {}
]],
[[bar(Q::foo<int>); bar(Q::foo<double>);]])],
[AC_MSG_RESULT(yes)],
[AC_DEFINE(GVX_BROKEN_TEMPLATE_FUNCTIONS,1,[can take address of template funtions?])
 AC_MSG_RESULT(no)])

### Check c++ name mangling

AC_MSG_CHECKING([whether typeinfo::name() gives a mangled typename])

AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <typeinfo>
#include <string.h>

namespace Q {
template <class T>
  struct foo {};
}

struct bar {};

int main()
{
  extern Q::foo<bar> p;
  return (strcmp("Q::foo<bar>", typeid(p).name()) == 0) ? 0 : 1;
}
]])],
[AC_DEFINE(GVX_NO_TYPENAME_MANGLING,1,[is typeid().name() unmangled?])
 AC_MSG_RESULT(no)],
[AC_MSG_RESULT(yes)],[])

AC_CHECK_PROG(have_prog_cxxfilt, [c++filt], yes, no)
if test "$have_prog_cxxfilt" = yes; then
   AC_DEFINE(GVX_HAVE_PROG_CXXFILT,1,[do we have a 'c++filt' program?])
fi

have_std_io=no

AC_MSG_CHECKING([whether iostreams are in std namespace])

AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <iostream>]], [[std::iostream* p;]])],
                  [have_std_io=yes],[])

if test $have_std_io = no; then
   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <iostream.h>]], [[std::iostream* p;]])],
                     [have_std_io=yes],[])
fi

AC_MSG_RESULT($have_std_io)

if test $have_std_io = no; then
   AC_MSG_ERROR([the iostreams library is out of date])
fi

### Check support for c++ iostreams

AC_MSG_CHECKING([whether c++ compiler supports standard iostreams])

AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <iostream>]], [[std::ios_base* p;]])],
                  [standard_iostreams=yes],
		  [standard_iostreams=no])

AC_MSG_RESULT($standard_iostreams)

if test $standard_iostreams = no; then
   AC_MSG_ERROR([the iostreams library is out of date])
fi

##########################################################################
### Checks for header files.

AC_MSG_CHECKING([for cxxcpp])
AC_MSG_RESULT([$CXXCPP])

case $windowsystem in
   x11)
      AC_PATH_XTRA
      ;;
   aqua)
      # nothing
      ;;
esac

CPPFLAGS="$CPPFLAGS $X_CFLAGS"
LDFLAGS="$LDFLAGS $X_LIBS"

AC_CHECK_HEADERS([limits iosfwd iostream istream ostream fstream sstream \
		  streambuf ios ext/stdio_filebuf.h cxxabi.h \
		  png.h jpeglib.h fcntl.h termios.h sys/time.h unistd.h \
		  expat.h],,,-)

AC_CHECK_HEADER([dmedia/audio.h],
		[AC_DEFINE(HAVE_DMEDIA_AUDIO_H,1,[have dmedia/audio.h?])
		 LIBS="$LIBS -laudio -laudiofile"],,-)

AC_CHECK_HEADER([Alib.h],
		[AC_DEFINE(HAVE_ALIB_H,1,[have Alib.h?]) LIBS="$LIBS -lAlib"],,-)

AC_CHECK_HEADER([esd.h],
		[AC_DEFINE(HAVE_ESD_H,1,[have esd.h?])
		 LIBS="$LIBS -lesd -laudiofile"],,-)

AC_CHECK_HEADER([QuickTime/Movies.h],
		[AC_DEFINE(HAVE_QUICKTIME_MOVIES_H,1,[have QuickTime/Movies.h?])
		 LIBS="$LIBS -framework QuickTime -framework Carbon"],,-)

##########################################################################
### Checks for libraries.

AC_CHECK_LIB_CXX(m, [#include <cmath>], [sin(0.0)],
		 [LIBS="-lm $LIBS"], [AC_MSG_ERROR(libm check failed)])

AC_CHECK_LIB_CXX(png,
		 [#include <png.h>],
		 [png_destroy_read_struct(0,0,0)],
		 [LIBS="-lpng $LIBS"
		  AC_DEFINE(HAVE_LIBPNG,1,[libpng present and working?])],
		 [AC_LATE_WARN(libpng check failed)])

AC_CHECK_LIB_CXX(jpeg,
		 [#include <cstdio>
		  extern "C" {
		  #include <jpeglib.h>
		  }],
		 [jpeg_create_decompress(0)],
		 [LIBS="-ljpeg $LIBS"
		  AC_DEFINE(HAVE_LIBJPEG,1,[libjpeg present and working?])],
		 [AC_LATE_WARN(libjpeg check failed)])

AC_CHECK_LIB_CXX(z, [#include <zlib.h>], [gzopen(0,0)],
		 [LIBS="-lz $LIBS"], [AC_MSG_ERROR(libz check failed)])

case $windowsystem in
   x11)
      AC_CHECK_LIB_CXX(X11, [#include <X11/Xlib.h>], [XQueryColor(0,0,0)],
	               [LIBS="-lX11 $LIBS"], [AC_MSG_ERROR(libX11 check failed)])
      AC_CHECK_LIB_CXX(GL, [#include <GL/gl.h>], [glEnd()],
         	       [LIBS="-lGL $LIBS"], [AC_MSG_ERROR(libGL check failed)])

      AC_CHECK_LIB_CXX(GLU, [#include <GL/glu.h>], [gluErrorString(0)],
      		       [LIBS="-lGLU $LIBS"], [AC_MSG_ERROR(libGLU check failed)])
      ;;
   aqua)
      LIBS="$LIBS -framework AGL -framework OpenGL"
      ;;
esac


AC_CHECK_LIB_CXX(expat, [#include <expat.h>], [XML_ParserFree(0)],
		 [LIBS="-lexpat $LIBS"], [AC_MSG_ERROR(libexpat check failed)])

# add -lefence to LIBS for Electric Fence mem debugging

###

AC_MSG_CHECKING([whether OpenGL implementation is Mesa])

# display lists don't work at present with i686/linux/mesa

AC_EGREP_HEADER(MESA, [GL/gl.h],
		[AC_DEFINE(GVX_BROKEN_GL_DISPLAY_LISTS,1,[broken OpenGL display lists?])
                 AC_MSG_RESULT(yes)],
		[AC_MSG_RESULT(no)])

### Setup linking options

if test $need_rpath = yes; then
   LDFLAGS="$LDFLAGS -Wl,-rpath,\${exec_prefix}/lib"
fi
LDFLAGS="$LDFLAGS -L\${exec_prefix}/lib"

##########################################################################
### Process command-line options.

### --with-tcltk

AC_MSG_CHECKING([for location of tcl+tk >= 8.4])

AC_ARG_WITH(tcltk,
	    [AC_HELP_STRING([--with-tcltk=DIR],
			    [specify where tcl+tk >= 8.4 are installed [default=/usr]])],
	    ,
	    with_tcltk=/usr)

AC_MSG_RESULT($with_tcltk)

case $windowsystem in
   x11)
      # Need to *prepend* with_tcltk/include to CPPFLAGS, so that we find
      # tcl.h, tk.h, etc. in with_tcltk rather than in the standard system
      # location

      CPPFLAGS="-I${with_tcltk}/include $CPPFLAGS"

      if test $need_rpath = yes; then
         LDFLAGS="$LDFLAGS -Wl,-rpath,${with_tcltk}/lib"
      fi
      LDFLAGS="-L${with_tcltk}/lib $LDFLAGS"

      AC_MSG_CHECKING([for tcl+tk versions])

      if ! test -r ${with_tcltk}/lib/tclConfig.sh; then
         AC_MSG_ERROR([could not find tclConfig.sh in ${with_tcltk}/lib])
      fi

      if ! test -r ${with_tcltk}/lib/tkConfig.sh; then
         AC_MSG_ERROR([could not find tkConfig.sh in ${with_tcltk}/lib])
      fi

      TCL_VERSION=`sh -c ". ${with_tcltk}/lib/tclConfig.sh ; echo \\$TCL_VERSION"`
      TK_VERSION=`sh -c ". ${with_tcltk}/lib/tkConfig.sh ; echo \\$TK_VERSION"`

      TCL_SRC_DIR=`sh -c ". ${with_tcltk}/lib/tclConfig.sh ; echo \\$TCL_SRC_DIR"`
      TK_SRC_DIR=`sh -c ". ${with_tcltk}/lib/tkConfig.sh ; echo \\$TK_SRC_DIR"`

      CPPFLAGS="-I$TCL_SRC_DIR/generic -I$TK_SRC_DIR/generic $CPPFLAGS"

      AC_MSG_RESULT([tcl ($TCL_VERSION), tk ($TK_VERSION)])

      LIBS="$LIBS -ltcl${TCL_VERSION} -ltk${TK_VERSION}"
      ;;
   aqua)
      AC_DEFINE(GVX_AQUA_TK,1,[use Mac OS X aqua port of Tk])
      CPPFLAGS="-I${with_tcltk}/Tcl.framework/Headers $CPPFLAGS"
      CPPFLAGS="-I${with_tcltk}/Tcl.framework/PrivateHeaders $CPPFLAGS"
      CPPFLAGS="-I${with_tcltk}/Tk.framework/Headers $CPPFLAGS"
      CPPFLAGS="-I${with_tcltk}/Tk.framework/PrivateHeaders $CPPFLAGS"
      LIBS="$LIBS -F${with_tcltk} -framework Tk -framework Tcl"
      ;;
   *)
      AC_MSG_ERROR([unknown windowing system $windowsystem])
      ;;
esac

AC_CHECK_HEADERS([tclInt.h])

### --with-matlab

AC_MSG_CHECKING([whether to enable matlab support])

AC_ARG_WITH(matlab,
	    [AC_HELP_STRING([--with-matlab],
			    [specify MATLAB root directory (e.g., /usr/local/matlab) [default=no]])],
	    ,
	    with_matlab=no)

if test -d $with_matlab; then
   AC_MSG_RESULT($with_matlab)

   AC_MSG_CHECKING([for matlab architecture])
   case $OS in
      Linux)
	 matlab_arch=glnx86
         ;;
      *)
         AC_MSG_ERROR([matlab architecture unknown for '$OS'])
	 ;;
   esac
   AC_MSG_RESULT($matlab_arch)

   CPPFLAGS="$CPPFLAGS -I${with_matlab}/extern/include"
   #for old matlab (<= r12): matlab_lib=${with_matlab}/extern/lib/${matlab_arch}
   matlab_lib=${with_matlab}/bin/${matlab_arch}
   LDFLAGS="$LDFLAGS -L${matlab_lib}"
   if test $need_rpath = yes; then
      LDFLAGS="$LDFLAGS -Wl,-rpath,${matlab_lib}"
   fi
else
   AC_MSG_RESULT(no)
   AC_DEFINE(GVX_NO_MATLAB,1,[without matlab support?])
   matlab_lib=""
fi

AC_SUBST(matlab_lib)

### --enable-readline

enable_readline=yes

AC_CHECK_HEADERS([readline/readline.h readline/history.h],
		  , enable_readline=no,-)

if test $enable_readline = yes; then

   AC_CHECK_LIB_CXX(termcap, [#include <termcap.h>], [tgetent(0,0)],
		    [LIBS="-ltermcap $LIBS"])

   AC_CHECK_LIB_CXX(readline,
		    [#include <stdio.h>
		     #include <readline/readline.h>],
		    [rl_callback_handler_install(0,0)],
		    [LIBS="-lreadline $LIBS"])
else
   AC_DEFINE(GVX_NO_READLINE,1,[don't do readline support?])
fi

### --enable-debug

AC_MSG_CHECKING([whether to enable debug mode])

AC_ARG_ENABLE(debug,
	      [AC_HELP_STRING([--enable-debug],
			      [whether the build should include debugging [yes]])],
	      ,
	      enable_debug=yes)

AC_MSG_RESULT($enable_debug)

if test $enable_debug = yes; then
   CXXFLAGS="$CXXFLAGS $cxxflags_debug"
else
   AC_DEFINE(GVX_NO_DEBUG,1,[statically turn off all debug statements?])
   AC_DEFINE(GVX_NO_PROF,1,[disable profiling?])
   CXXFLAGS="$CXXFLAGS $cxxflags_prod"
fi

### --enable-rgba

AC_MSG_CHECKING([whether to enable rgba color])

AC_ARG_ENABLE(rgba,
	      [AC_HELP_STRING([--enable-rgba],
			      [whether to use rgba color (instead of color index) [yes]])],
	      ,
	      enable_rgba=yes)

AC_MSG_RESULT($enable_rgba)

if test $enable_rgba = no; then
   AC_DEFINE(GVX_NO_RGBA,1,[disable rgba color?])
fi

### --enable-double-buffer

AC_MSG_CHECKING([whether to enable double-buffered graphics])

AC_ARG_ENABLE(double-buffer,
	      [AC_HELP_STRING([--enable-double-buffer],
			      [whether to use double-buffered graphics (instead of single-buffered) [yes]])],
	      ,
	      enable_double_buffer=yes)

AC_MSG_RESULT($enable_double_buffer)

if test $enable_double_buffer = no; then
   AC_DEFINE(GVX_NO_DOUBLE_BUFFER,1,
             [use single- instead of double-buffering?])
fi

### --enable-direct-render

AC_MSG_CHECKING([whether to enable direct-rendered OpenGL graphics])

AC_ARG_ENABLE(direct-render,
	      [AC_HELP_STRING([--enable-direct-render],
			      [whether to use direct-rendered OpenGL graphics [yes]])],
	      ,
	      enable_direct_render=yes)

AC_MSG_RESULT($enable_direct_render)

if test $enable_direct_render = no; then
   AC_DEFINE(GVX_NO_DIRECT_RENDER,1,
             [use indirect instead of direct-rendering?])
fi

### --enable-werror

AC_MSG_CHECKING([whether to force all compiler warnings to be errors])

AC_ARG_ENABLE(werror,
	      [AC_HELP_STRING([--enable-werror],
			      [whether to force all compiler warnings to be errors [yes]])],
	      ,
	      enable_werror=yes)

AC_MSG_RESULT($enable_werror)

if test $enable_werror = yes; then
   case ${CXX} in
      *g++*)
         CXXFLAGS="$CXXFLAGS -Werror"
	 ;;
   esac
fi

### --with-htmldoc

AC_MSG_CHECKING([where to install html documentation])

AC_ARG_WITH(htmldoc,
	    [AC_HELP_STRING([--with-htmldoc=DIR],
			    [specify where to install html documentation])],
	    ,
	    with_htmldoc=${HOME}/www/groovx)

AC_MSG_RESULT($with_htmldoc)

AC_SUBST(with_htmldoc)


##########################################################################
### Generate output

AC_GIVE_LATE_WARNINGS()

AC_CONFIG_FILES([Makefile:Makefile.in])
AC_CONFIG_FILES([doc/DoxyConfig:doc/DoxyConfig.in])

AC_CONFIG_HEADERS([config.h])

AC_OUTPUT
